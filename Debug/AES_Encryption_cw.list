
AES_Encryption_cw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005670  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c28  08005c28  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c30  08005c30  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000854  20000068  08005ca0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  08005ca0  000208bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121e3  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002792  00000000  00000000  000322bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  00034a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cbe  00000000  00000000  00035ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000297f1  00000000  00000000  00036786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001414f  00000000  00000000  0005ff77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff5db  00000000  00000000  000740c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d28  00000000  00000000  001736a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  001783cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08005858 	.word	0x08005858

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08005858 	.word	0x08005858

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <getSBoxValue>:
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d };

static uint8_t
getSBoxValue(uint8_t num) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
    return sbox[num];
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4a03      	ldr	r2, [pc, #12]	; (80005f8 <getSBoxValue+0x1c>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	080058dc 	.word	0x080058dc

080005fc <getSBoxInvert>:

static uint8_t
getSBoxInvert(uint8_t num) {
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
    return rsbox[num];
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	4a03      	ldr	r2, [pc, #12]	; (8000618 <getSBoxInvert+0x1c>)
 800060a:	5cd3      	ldrb	r3, [r2, r3]
}
 800060c:	4618      	mov	r0, r3
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	080059dc 	.word	0x080059dc

0800061c <KeyExpansion>:

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void
KeyExpansion(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
    uint32_t i, k;
    uint8_t tempa[4]; // Used for the column/row operations

    // The first round key is the key itself.
    for(i = 0; i < Nk; ++i) {
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	e034      	b.n	8000692 <KeyExpansion+0x76>
        RoundKey[(i * 4) + 0] = ((Key[i] >> 24) & 0xFF);
 8000628:	4b85      	ldr	r3, [pc, #532]	; (8000840 <KeyExpansion+0x224>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	4413      	add	r3, r2
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	0e1a      	lsrs	r2, r3, #24
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	b2d1      	uxtb	r1, r2
 800063c:	4a81      	ldr	r2, [pc, #516]	; (8000844 <KeyExpansion+0x228>)
 800063e:	54d1      	strb	r1, [r2, r3]
        RoundKey[(i * 4) + 1] = ((Key[i] >> 16) & 0xFF);
 8000640:	4b7f      	ldr	r3, [pc, #508]	; (8000840 <KeyExpansion+0x224>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	4413      	add	r3, r2
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	0c1a      	lsrs	r2, r3, #16
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	3301      	adds	r3, #1
 8000654:	b2d1      	uxtb	r1, r2
 8000656:	4a7b      	ldr	r2, [pc, #492]	; (8000844 <KeyExpansion+0x228>)
 8000658:	54d1      	strb	r1, [r2, r3]
        RoundKey[(i * 4) + 2] = ((Key[i] >>  8) & 0xFF);
 800065a:	4b79      	ldr	r3, [pc, #484]	; (8000840 <KeyExpansion+0x224>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	0a1a      	lsrs	r2, r3, #8
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	3302      	adds	r3, #2
 800066e:	b2d1      	uxtb	r1, r2
 8000670:	4a74      	ldr	r2, [pc, #464]	; (8000844 <KeyExpansion+0x228>)
 8000672:	54d1      	strb	r1, [r2, r3]
        RoundKey[(i * 4) + 3] =  (Key[i]        & 0xFF);
 8000674:	4b72      	ldr	r3, [pc, #456]	; (8000840 <KeyExpansion+0x224>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	4413      	add	r3, r2
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	3303      	adds	r3, #3
 8000686:	b2d1      	uxtb	r1, r2
 8000688:	4a6e      	ldr	r2, [pc, #440]	; (8000844 <KeyExpansion+0x228>)
 800068a:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Nk; ++i) {
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3301      	adds	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	4b6d      	ldr	r3, [pc, #436]	; (8000848 <KeyExpansion+0x22c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4293      	cmp	r3, r2
 800069c:	d3c4      	bcc.n	8000628 <KeyExpansion+0xc>
    }

    // All other round keys are found from the previous round keys.
    //i == Nk
    for(; i < Nb * (Nr + 1); ++i) {
 800069e:	e0c0      	b.n	8000822 <KeyExpansion+0x206>
        tempa[0] = RoundKey[(i-1) * 4 + 0];
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4a67      	ldr	r2, [pc, #412]	; (8000844 <KeyExpansion+0x228>)
 80006a8:	5cd3      	ldrb	r3, [r2, r3]
 80006aa:	713b      	strb	r3, [r7, #4]
        tempa[1] = RoundKey[(i-1) * 4 + 1];
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a63      	ldr	r2, [pc, #396]	; (8000844 <KeyExpansion+0x228>)
 80006b6:	5cd3      	ldrb	r3, [r2, r3]
 80006b8:	717b      	strb	r3, [r7, #5]
        tempa[2] = RoundKey[(i-1) * 4 + 2];
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	3b01      	subs	r3, #1
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	3302      	adds	r3, #2
 80006c2:	4a60      	ldr	r2, [pc, #384]	; (8000844 <KeyExpansion+0x228>)
 80006c4:	5cd3      	ldrb	r3, [r2, r3]
 80006c6:	71bb      	strb	r3, [r7, #6]
        tempa[3] = RoundKey[(i-1) * 4 + 3];
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	3303      	adds	r3, #3
 80006d0:	4a5c      	ldr	r2, [pc, #368]	; (8000844 <KeyExpansion+0x228>)
 80006d2:	5cd3      	ldrb	r3, [r2, r3]
 80006d4:	71fb      	strb	r3, [r7, #7]

        if (i % Nk == 0) {
 80006d6:	4b5c      	ldr	r3, [pc, #368]	; (8000848 <KeyExpansion+0x22c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	fbb3 f1f2 	udiv	r1, r3, r2
 80006e2:	fb01 f202 	mul.w	r2, r1, r2
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d12e      	bne.n	800074a <KeyExpansion+0x12e>
        // This function shifts the 4 bytes in a word to the left once.
        // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

            // Function RotWord()
            k = tempa[0];
 80006ec:	793b      	ldrb	r3, [r7, #4]
 80006ee:	60bb      	str	r3, [r7, #8]
            tempa[0] = tempa[1];
 80006f0:	797b      	ldrb	r3, [r7, #5]
 80006f2:	713b      	strb	r3, [r7, #4]
            tempa[1] = tempa[2];
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	717b      	strb	r3, [r7, #5]
            tempa[2] = tempa[3];
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	71bb      	strb	r3, [r7, #6]
            tempa[3] = k;
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	71fb      	strb	r3, [r7, #7]

            // SubWord() is a function that takes a four-byte input word and
            // applies the S-box to each of the four bytes to produce an output word.

            // Function Subword()
            tempa[0] = getSBoxValue(tempa[0]);
 8000702:	793b      	ldrb	r3, [r7, #4]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff69 	bl	80005dc <getSBoxValue>
 800070a:	4603      	mov	r3, r0
 800070c:	713b      	strb	r3, [r7, #4]
            tempa[1] = getSBoxValue(tempa[1]);
 800070e:	797b      	ldrb	r3, [r7, #5]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff63 	bl	80005dc <getSBoxValue>
 8000716:	4603      	mov	r3, r0
 8000718:	717b      	strb	r3, [r7, #5]
            tempa[2] = getSBoxValue(tempa[2]);
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff5d 	bl	80005dc <getSBoxValue>
 8000722:	4603      	mov	r3, r0
 8000724:	71bb      	strb	r3, [r7, #6]
            tempa[3] = getSBoxValue(tempa[3]);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff57 	bl	80005dc <getSBoxValue>
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]

            tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8000732:	793a      	ldrb	r2, [r7, #4]
 8000734:	4b44      	ldr	r3, [pc, #272]	; (8000848 <KeyExpansion+0x22c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000740:	4942      	ldr	r1, [pc, #264]	; (800084c <KeyExpansion+0x230>)
 8000742:	5ccb      	ldrb	r3, [r1, r3]
 8000744:	4053      	eors	r3, r2
 8000746:	b2db      	uxtb	r3, r3
 8000748:	713b      	strb	r3, [r7, #4]
        }

        if (Nk == 8) {
 800074a:	4b3f      	ldr	r3, [pc, #252]	; (8000848 <KeyExpansion+0x22c>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b08      	cmp	r3, #8
 8000750:	d122      	bne.n	8000798 <KeyExpansion+0x17c>
            if (i % Nk == 4) {
 8000752:	4b3d      	ldr	r3, [pc, #244]	; (8000848 <KeyExpansion+0x22c>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	fbb3 f1f2 	udiv	r1, r3, r2
 800075e:	fb01 f202 	mul.w	r2, r1, r2
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	2b04      	cmp	r3, #4
 8000766:	d117      	bne.n	8000798 <KeyExpansion+0x17c>
                // Function Subword()
                tempa[0] = getSBoxValue(tempa[0]);
 8000768:	793b      	ldrb	r3, [r7, #4]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff36 	bl	80005dc <getSBoxValue>
 8000770:	4603      	mov	r3, r0
 8000772:	713b      	strb	r3, [r7, #4]
                tempa[1] = getSBoxValue(tempa[1]);
 8000774:	797b      	ldrb	r3, [r7, #5]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff30 	bl	80005dc <getSBoxValue>
 800077c:	4603      	mov	r3, r0
 800077e:	717b      	strb	r3, [r7, #5]
                tempa[2] = getSBoxValue(tempa[2]);
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff2a 	bl	80005dc <getSBoxValue>
 8000788:	4603      	mov	r3, r0
 800078a:	71bb      	strb	r3, [r7, #6]
                tempa[3] = getSBoxValue(tempa[3]);
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff24 	bl	80005dc <getSBoxValue>
 8000794:	4603      	mov	r3, r0
 8000796:	71fb      	strb	r3, [r7, #7]
            }
        }
        RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 8000798:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <KeyExpansion+0x22c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	1a9b      	subs	r3, r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4a27      	ldr	r2, [pc, #156]	; (8000844 <KeyExpansion+0x228>)
 80007a6:	5cd1      	ldrb	r1, [r2, r3]
 80007a8:	793a      	ldrb	r2, [r7, #4]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	404a      	eors	r2, r1
 80007b0:	b2d1      	uxtb	r1, r2
 80007b2:	4a24      	ldr	r2, [pc, #144]	; (8000844 <KeyExpansion+0x228>)
 80007b4:	54d1      	strb	r1, [r2, r3]
        RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <KeyExpansion+0x22c>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <KeyExpansion+0x228>)
 80007c6:	5cd1      	ldrb	r1, [r2, r3]
 80007c8:	797a      	ldrb	r2, [r7, #5]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	3301      	adds	r3, #1
 80007d0:	404a      	eors	r2, r1
 80007d2:	b2d1      	uxtb	r1, r2
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <KeyExpansion+0x228>)
 80007d6:	54d1      	strb	r1, [r2, r3]
        RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <KeyExpansion+0x22c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	1a9b      	subs	r3, r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	3302      	adds	r3, #2
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <KeyExpansion+0x228>)
 80007e8:	5cd1      	ldrb	r1, [r2, r3]
 80007ea:	79ba      	ldrb	r2, [r7, #6]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	3302      	adds	r3, #2
 80007f2:	404a      	eors	r2, r1
 80007f4:	b2d1      	uxtb	r1, r2
 80007f6:	4a13      	ldr	r2, [pc, #76]	; (8000844 <KeyExpansion+0x228>)
 80007f8:	54d1      	strb	r1, [r2, r3]
        RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <KeyExpansion+0x22c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	1a9b      	subs	r3, r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	3303      	adds	r3, #3
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <KeyExpansion+0x228>)
 800080a:	5cd1      	ldrb	r1, [r2, r3]
 800080c:	79fa      	ldrb	r2, [r7, #7]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	3303      	adds	r3, #3
 8000814:	404a      	eors	r2, r1
 8000816:	b2d1      	uxtb	r1, r2
 8000818:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <KeyExpansion+0x228>)
 800081a:	54d1      	strb	r1, [r2, r3]
    for(; i < Nb * (Nr + 1); ++i) {
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3301      	adds	r3, #1
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <KeyExpansion+0x234>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	461a      	mov	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	4293      	cmp	r3, r2
 8000830:	f4ff af36 	bcc.w	80006a0 <KeyExpansion+0x84>
    }
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000188 	.word	0x20000188
 8000844:	20000098 	.word	0x20000098
 8000848:	20000084 	.word	0x20000084
 800084c:	08005adc 	.word	0x08005adc
 8000850:	20000086 	.word	0x20000086

08000854 <AddRoundKey>:

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void
AddRoundKey(uint8_t round) {
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
    uint8_t i, j;
    for(i = 0; i < 4; ++i) {
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]
 8000862:	e025      	b.n	80008b0 <AddRoundKey+0x5c>
        for(j = 0; j < 4; ++j) {
 8000864:	2300      	movs	r3, #0
 8000866:	73bb      	strb	r3, [r7, #14]
 8000868:	e01c      	b.n	80008a4 <AddRoundKey+0x50>
            state[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 800086a:	7bfa      	ldrb	r2, [r7, #15]
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	4915      	ldr	r1, [pc, #84]	; (80008c4 <AddRoundKey+0x70>)
 8000870:	0092      	lsls	r2, r2, #2
 8000872:	440a      	add	r2, r1
 8000874:	4413      	add	r3, r2
 8000876:	7818      	ldrb	r0, [r3, #0]
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	009a      	lsls	r2, r3, #2
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	4413      	add	r3, r2
 8000880:	009a      	lsls	r2, r3, #2
 8000882:	7bbb      	ldrb	r3, [r7, #14]
 8000884:	4413      	add	r3, r2
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <AddRoundKey+0x74>)
 8000888:	5cd1      	ldrb	r1, [r2, r3]
 800088a:	7bfa      	ldrb	r2, [r7, #15]
 800088c:	7bbb      	ldrb	r3, [r7, #14]
 800088e:	4041      	eors	r1, r0
 8000890:	b2c8      	uxtb	r0, r1
 8000892:	490c      	ldr	r1, [pc, #48]	; (80008c4 <AddRoundKey+0x70>)
 8000894:	0092      	lsls	r2, r2, #2
 8000896:	440a      	add	r2, r1
 8000898:	4413      	add	r3, r2
 800089a:	4602      	mov	r2, r0
 800089c:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < 4; ++j) {
 800089e:	7bbb      	ldrb	r3, [r7, #14]
 80008a0:	3301      	adds	r3, #1
 80008a2:	73bb      	strb	r3, [r7, #14]
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d9df      	bls.n	800086a <AddRoundKey+0x16>
    for(i = 0; i < 4; ++i) {
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	3301      	adds	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d9d6      	bls.n	8000864 <AddRoundKey+0x10>
        }
    }
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	20000088 	.word	0x20000088
 80008c8:	20000098 	.word	0x20000098

080008cc <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void
SubBytes(void) {
 80008cc:	b5b0      	push	{r4, r5, r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
    uint8_t i, j;
    for(i = 0; i < 4; ++i) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	e01f      	b.n	8000918 <SubBytes+0x4c>
        for(j = 0; j < 4; ++j) {
 80008d8:	2300      	movs	r3, #0
 80008da:	71bb      	strb	r3, [r7, #6]
 80008dc:	e016      	b.n	800090c <SubBytes+0x40>
            state[j][i] = getSBoxValue(state[j][i]);
 80008de:	79ba      	ldrb	r2, [r7, #6]
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4911      	ldr	r1, [pc, #68]	; (8000928 <SubBytes+0x5c>)
 80008e4:	0092      	lsls	r2, r2, #2
 80008e6:	440a      	add	r2, r1
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	79bd      	ldrb	r5, [r7, #6]
 80008ee:	79fc      	ldrb	r4, [r7, #7]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fe73 	bl	80005dc <getSBoxValue>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <SubBytes+0x5c>)
 80008fc:	00ab      	lsls	r3, r5, #2
 80008fe:	4413      	add	r3, r2
 8000900:	4423      	add	r3, r4
 8000902:	460a      	mov	r2, r1
 8000904:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < 4; ++j) {
 8000906:	79bb      	ldrb	r3, [r7, #6]
 8000908:	3301      	adds	r3, #1
 800090a:	71bb      	strb	r3, [r7, #6]
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	2b03      	cmp	r3, #3
 8000910:	d9e5      	bls.n	80008de <SubBytes+0x12>
    for(i = 0; i < 4; ++i) {
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	3301      	adds	r3, #1
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d9dc      	bls.n	80008d8 <SubBytes+0xc>
        }
    }
}
 800091e:	bf00      	nop
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bdb0      	pop	{r4, r5, r7, pc}
 8000928:	20000088 	.word	0x20000088

0800092c <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void
ShiftRows(void) {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
    uint8_t temp;

    // Rotate first row 1 columns to left
    temp        = state[0][1];
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <ShiftRows+0x84>)
 8000934:	785b      	ldrb	r3, [r3, #1]
 8000936:	71fb      	strb	r3, [r7, #7]
    state[0][1] = state[1][1];
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <ShiftRows+0x84>)
 800093a:	795a      	ldrb	r2, [r3, #5]
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <ShiftRows+0x84>)
 800093e:	705a      	strb	r2, [r3, #1]
    state[1][1] = state[2][1];
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <ShiftRows+0x84>)
 8000942:	7a5a      	ldrb	r2, [r3, #9]
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <ShiftRows+0x84>)
 8000946:	715a      	strb	r2, [r3, #5]
    state[2][1] = state[3][1];
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <ShiftRows+0x84>)
 800094a:	7b5a      	ldrb	r2, [r3, #13]
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <ShiftRows+0x84>)
 800094e:	725a      	strb	r2, [r3, #9]
    state[3][1] = temp;
 8000950:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <ShiftRows+0x84>)
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	7353      	strb	r3, [r2, #13]

    // Rotate second row 2 columns to left
    temp        = state[0][2];
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <ShiftRows+0x84>)
 8000958:	789b      	ldrb	r3, [r3, #2]
 800095a:	71fb      	strb	r3, [r7, #7]
    state[0][2] = state[2][2];
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <ShiftRows+0x84>)
 800095e:	7a9a      	ldrb	r2, [r3, #10]
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <ShiftRows+0x84>)
 8000962:	709a      	strb	r2, [r3, #2]
    state[2][2] = temp;
 8000964:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <ShiftRows+0x84>)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	7293      	strb	r3, [r2, #10]

    temp        = state[1][2];
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <ShiftRows+0x84>)
 800096c:	799b      	ldrb	r3, [r3, #6]
 800096e:	71fb      	strb	r3, [r7, #7]
    state[1][2] = state[3][2];
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <ShiftRows+0x84>)
 8000972:	7b9a      	ldrb	r2, [r3, #14]
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <ShiftRows+0x84>)
 8000976:	719a      	strb	r2, [r3, #6]
    state[3][2] = temp;
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <ShiftRows+0x84>)
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	7393      	strb	r3, [r2, #14]

    // Rotate third row 3 columns to left
    temp        = state[0][3];
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <ShiftRows+0x84>)
 8000980:	78db      	ldrb	r3, [r3, #3]
 8000982:	71fb      	strb	r3, [r7, #7]
    state[0][3] = state[3][3];
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <ShiftRows+0x84>)
 8000986:	7bda      	ldrb	r2, [r3, #15]
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <ShiftRows+0x84>)
 800098a:	70da      	strb	r2, [r3, #3]
    state[3][3] = state[2][3];
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <ShiftRows+0x84>)
 800098e:	7ada      	ldrb	r2, [r3, #11]
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <ShiftRows+0x84>)
 8000992:	73da      	strb	r2, [r3, #15]
    state[2][3] = state[1][3];
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <ShiftRows+0x84>)
 8000996:	79da      	ldrb	r2, [r3, #7]
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <ShiftRows+0x84>)
 800099a:	72da      	strb	r2, [r3, #11]
    state[1][3] = temp;
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <ShiftRows+0x84>)
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	71d3      	strb	r3, [r2, #7]
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000088 	.word	0x20000088

080009b4 <xtime>:

static uint8_t
xtime(uint8_t x) {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
    return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	b25a      	sxtb	r2, r3
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	09db      	lsrs	r3, r3, #7
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4619      	mov	r1, r3
 80009cc:	0049      	lsls	r1, r1, #1
 80009ce:	440b      	add	r3, r1
 80009d0:	4619      	mov	r1, r3
 80009d2:	00c8      	lsls	r0, r1, #3
 80009d4:	4619      	mov	r1, r3
 80009d6:	4603      	mov	r3, r0
 80009d8:	440b      	add	r3, r1
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	b25b      	sxtb	r3, r3
 80009de:	4053      	eors	r3, r2
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	b2db      	uxtb	r3, r3
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void
MixColumns(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t Tmp, Tm, t;
    for(i = 0; i < 4; ++i) {
 80009f6:	2300      	movs	r3, #0
 80009f8:	71fb      	strb	r3, [r7, #7]
 80009fa:	e0a4      	b.n	8000b46 <MixColumns+0x156>
        t   = state[i][0];
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	4a56      	ldr	r2, [pc, #344]	; (8000b58 <MixColumns+0x168>)
 8000a00:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000a04:	71bb      	strb	r3, [r7, #6]
        Tmp = state[i][0] ^ state[i][1] ^ state[i][2] ^ state[i][3] ;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4a53      	ldr	r2, [pc, #332]	; (8000b58 <MixColumns+0x168>)
 8000a0a:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4951      	ldr	r1, [pc, #324]	; (8000b58 <MixColumns+0x168>)
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	440b      	add	r3, r1
 8000a16:	785b      	ldrb	r3, [r3, #1]
 8000a18:	4053      	eors	r3, r2
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	494e      	ldr	r1, [pc, #312]	; (8000b58 <MixColumns+0x168>)
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	440b      	add	r3, r1
 8000a24:	789b      	ldrb	r3, [r3, #2]
 8000a26:	4053      	eors	r3, r2
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	494a      	ldr	r1, [pc, #296]	; (8000b58 <MixColumns+0x168>)
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	440b      	add	r3, r1
 8000a32:	78db      	ldrb	r3, [r3, #3]
 8000a34:	4053      	eors	r3, r2
 8000a36:	717b      	strb	r3, [r7, #5]
        Tm  = state[i][0] ^ state[i][1] ; Tm = xtime(Tm);  state[i][0] ^= Tm ^ Tmp ;
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	4a47      	ldr	r2, [pc, #284]	; (8000b58 <MixColumns+0x168>)
 8000a3c:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4945      	ldr	r1, [pc, #276]	; (8000b58 <MixColumns+0x168>)
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	440b      	add	r3, r1
 8000a48:	785b      	ldrb	r3, [r3, #1]
 8000a4a:	4053      	eors	r3, r2
 8000a4c:	713b      	strb	r3, [r7, #4]
 8000a4e:	793b      	ldrb	r3, [r7, #4]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ffaf 	bl	80009b4 <xtime>
 8000a56:	4603      	mov	r3, r0
 8000a58:	713b      	strb	r3, [r7, #4]
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4a3e      	ldr	r2, [pc, #248]	; (8000b58 <MixColumns+0x168>)
 8000a5e:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000a62:	793a      	ldrb	r2, [r7, #4]
 8000a64:	797b      	ldrb	r3, [r7, #5]
 8000a66:	4053      	eors	r3, r2
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	404a      	eors	r2, r1
 8000a6e:	b2d1      	uxtb	r1, r2
 8000a70:	4a39      	ldr	r2, [pc, #228]	; (8000b58 <MixColumns+0x168>)
 8000a72:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        Tm  = state[i][1] ^ state[i][2] ; Tm = xtime(Tm);  state[i][1] ^= Tm ^ Tmp ;
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4a37      	ldr	r2, [pc, #220]	; (8000b58 <MixColumns+0x168>)
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	785a      	ldrb	r2, [r3, #1]
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	4935      	ldr	r1, [pc, #212]	; (8000b58 <MixColumns+0x168>)
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	440b      	add	r3, r1
 8000a88:	789b      	ldrb	r3, [r3, #2]
 8000a8a:	4053      	eors	r3, r2
 8000a8c:	713b      	strb	r3, [r7, #4]
 8000a8e:	793b      	ldrb	r3, [r7, #4]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff8f 	bl	80009b4 <xtime>
 8000a96:	4603      	mov	r3, r0
 8000a98:	713b      	strb	r3, [r7, #4]
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4a2e      	ldr	r2, [pc, #184]	; (8000b58 <MixColumns+0x168>)
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	7859      	ldrb	r1, [r3, #1]
 8000aa4:	793a      	ldrb	r2, [r7, #4]
 8000aa6:	797b      	ldrb	r3, [r7, #5]
 8000aa8:	4053      	eors	r3, r2
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	404a      	eors	r2, r1
 8000ab0:	b2d1      	uxtb	r1, r2
 8000ab2:	4a29      	ldr	r2, [pc, #164]	; (8000b58 <MixColumns+0x168>)
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	460a      	mov	r2, r1
 8000aba:	705a      	strb	r2, [r3, #1]
        Tm  = state[i][2] ^ state[i][3] ; Tm = xtime(Tm);  state[i][2] ^= Tm ^ Tmp ;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	4a26      	ldr	r2, [pc, #152]	; (8000b58 <MixColumns+0x168>)
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	789a      	ldrb	r2, [r3, #2]
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4923      	ldr	r1, [pc, #140]	; (8000b58 <MixColumns+0x168>)
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	440b      	add	r3, r1
 8000ace:	78db      	ldrb	r3, [r3, #3]
 8000ad0:	4053      	eors	r3, r2
 8000ad2:	713b      	strb	r3, [r7, #4]
 8000ad4:	793b      	ldrb	r3, [r7, #4]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff6c 	bl	80009b4 <xtime>
 8000adc:	4603      	mov	r3, r0
 8000ade:	713b      	strb	r3, [r7, #4]
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <MixColumns+0x168>)
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	7899      	ldrb	r1, [r3, #2]
 8000aea:	793a      	ldrb	r2, [r7, #4]
 8000aec:	797b      	ldrb	r3, [r7, #5]
 8000aee:	4053      	eors	r3, r2
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	404a      	eors	r2, r1
 8000af6:	b2d1      	uxtb	r1, r2
 8000af8:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <MixColumns+0x168>)
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	460a      	mov	r2, r1
 8000b00:	709a      	strb	r2, [r3, #2]
        Tm  = state[i][3] ^ t ;           Tm = xtime(Tm);  state[i][3] ^= Tm ^ Tmp ;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <MixColumns+0x168>)
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	4413      	add	r3, r2
 8000b0a:	78da      	ldrb	r2, [r3, #3]
 8000b0c:	79bb      	ldrb	r3, [r7, #6]
 8000b0e:	4053      	eors	r3, r2
 8000b10:	713b      	strb	r3, [r7, #4]
 8000b12:	793b      	ldrb	r3, [r7, #4]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff4d 	bl	80009b4 <xtime>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	713b      	strb	r3, [r7, #4]
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <MixColumns+0x168>)
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4413      	add	r3, r2
 8000b26:	78d9      	ldrb	r1, [r3, #3]
 8000b28:	793a      	ldrb	r2, [r7, #4]
 8000b2a:	797b      	ldrb	r3, [r7, #5]
 8000b2c:	4053      	eors	r3, r2
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	404a      	eors	r2, r1
 8000b34:	b2d1      	uxtb	r1, r2
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <MixColumns+0x168>)
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4413      	add	r3, r2
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	70da      	strb	r2, [r3, #3]
    for(i = 0; i < 4; ++i) {
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	3301      	adds	r3, #1
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	f67f af57 	bls.w	80009fc <MixColumns+0xc>
    }
}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000088 	.word	0x20000088

08000b5c <Multiply>:

// Multiply is used to multiply numbers in the field GF(2^8)
static uint8_t
Multiply(uint8_t x, uint8_t y) {
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	460a      	mov	r2, r1
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	71bb      	strb	r3, [r7, #6]
    return (((y & 1) * x) ^
 8000b6c:	79bb      	ldrb	r3, [r7, #6]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	79fa      	ldrb	r2, [r7, #7]
 8000b76:	fb12 f303 	smulbb	r3, r2, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	b25c      	sxtb	r4, r3
 8000b7e:	79bb      	ldrb	r3, [r7, #6]
 8000b80:	085b      	lsrs	r3, r3, #1
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	b2dd      	uxtb	r5, r3
         ((y>>1 & 1) * xtime(x)) ^
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff11 	bl	80009b4 <xtime>
 8000b92:	4603      	mov	r3, r0
    return (((y & 1) * x) ^
 8000b94:	fb15 f303 	smulbb	r3, r5, r3
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	4063      	eors	r3, r4
 8000b9e:	b25c      	sxtb	r4, r3
         ((y>>1 & 1) * xtime(x)) ^
 8000ba0:	79bb      	ldrb	r3, [r7, #6]
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	b2dd      	uxtb	r5, r3
         ((y>>2 & 1) * xtime(xtime(x))) ^
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff00 	bl	80009b4 <xtime>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fefc 	bl	80009b4 <xtime>
 8000bbc:	4603      	mov	r3, r0
         ((y>>1 & 1) * xtime(x)) ^
 8000bbe:	fb15 f303 	smulbb	r3, r5, r3
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	4063      	eors	r3, r4
 8000bc8:	b25c      	sxtb	r4, r3
         ((y>>2 & 1) * xtime(xtime(x))) ^
 8000bca:	79bb      	ldrb	r3, [r7, #6]
 8000bcc:	08db      	lsrs	r3, r3, #3
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	b2dd      	uxtb	r5, r3
         ((y>>3 & 1) * xtime(xtime(xtime(x)))) ^
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff feeb 	bl	80009b4 <xtime>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fee7 	bl	80009b4 <xtime>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fee3 	bl	80009b4 <xtime>
 8000bee:	4603      	mov	r3, r0
         ((y>>2 & 1) * xtime(xtime(x))) ^
 8000bf0:	fb15 f303 	smulbb	r3, r5, r3
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	4063      	eors	r3, r4
 8000bfa:	b25c      	sxtb	r4, r3
         ((y>>3 & 1) * xtime(xtime(xtime(x)))) ^
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	091b      	lsrs	r3, r3, #4
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	b2dd      	uxtb	r5, r3
         ((y>>4 & 1) * xtime(xtime(xtime(xtime(x))))));
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fed2 	bl	80009b4 <xtime>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fece 	bl	80009b4 <xtime>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff feca 	bl	80009b4 <xtime>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fec6 	bl	80009b4 <xtime>
 8000c28:	4603      	mov	r3, r0
         ((y>>3 & 1) * xtime(xtime(xtime(x)))) ^
 8000c2a:	fb15 f303 	smulbb	r3, r5, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	4063      	eors	r3, r4
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	b2db      	uxtb	r3, r3
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bdb0      	pop	{r4, r5, r7, pc}

08000c40 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void
InvMixColumns(void) {
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
    int i;
    uint8_t a, b, c, d;
    for(i = 0; i < 4; ++i) {
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	e0ab      	b.n	8000da4 <InvMixColumns+0x164>
        a = state[i][0];
 8000c4c:	4a5a      	ldr	r2, [pc, #360]	; (8000db8 <InvMixColumns+0x178>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000c54:	70fb      	strb	r3, [r7, #3]
        b = state[i][1];
 8000c56:	4a58      	ldr	r2, [pc, #352]	; (8000db8 <InvMixColumns+0x178>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	785b      	ldrb	r3, [r3, #1]
 8000c60:	70bb      	strb	r3, [r7, #2]
        c = state[i][2];
 8000c62:	4a55      	ldr	r2, [pc, #340]	; (8000db8 <InvMixColumns+0x178>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	789b      	ldrb	r3, [r3, #2]
 8000c6c:	707b      	strb	r3, [r7, #1]
        d = state[i][3];
 8000c6e:	4a52      	ldr	r2, [pc, #328]	; (8000db8 <InvMixColumns+0x178>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	78db      	ldrb	r3, [r3, #3]
 8000c78:	703b      	strb	r3, [r7, #0]

        state[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8000c7a:	78fb      	ldrb	r3, [r7, #3]
 8000c7c:	210e      	movs	r1, #14
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff6c 	bl	8000b5c <Multiply>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461c      	mov	r4, r3
 8000c88:	78bb      	ldrb	r3, [r7, #2]
 8000c8a:	210b      	movs	r1, #11
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff65 	bl	8000b5c <Multiply>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4063      	eors	r3, r4
 8000c96:	b2dc      	uxtb	r4, r3
 8000c98:	787b      	ldrb	r3, [r7, #1]
 8000c9a:	210d      	movs	r1, #13
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff5d 	bl	8000b5c <Multiply>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4063      	eors	r3, r4
 8000ca6:	b2dc      	uxtb	r4, r3
 8000ca8:	783b      	ldrb	r3, [r7, #0]
 8000caa:	2109      	movs	r1, #9
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff55 	bl	8000b5c <Multiply>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4063      	eors	r3, r4
 8000cb6:	b2d9      	uxtb	r1, r3
 8000cb8:	4a3f      	ldr	r2, [pc, #252]	; (8000db8 <InvMixColumns+0x178>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        state[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	2109      	movs	r1, #9
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff49 	bl	8000b5c <Multiply>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461c      	mov	r4, r3
 8000cce:	78bb      	ldrb	r3, [r7, #2]
 8000cd0:	210e      	movs	r1, #14
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff42 	bl	8000b5c <Multiply>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4063      	eors	r3, r4
 8000cdc:	b2dc      	uxtb	r4, r3
 8000cde:	787b      	ldrb	r3, [r7, #1]
 8000ce0:	210b      	movs	r1, #11
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff3a 	bl	8000b5c <Multiply>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4063      	eors	r3, r4
 8000cec:	b2dc      	uxtb	r4, r3
 8000cee:	783b      	ldrb	r3, [r7, #0]
 8000cf0:	210d      	movs	r1, #13
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff32 	bl	8000b5c <Multiply>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4063      	eors	r3, r4
 8000cfc:	b2d9      	uxtb	r1, r3
 8000cfe:	4a2e      	ldr	r2, [pc, #184]	; (8000db8 <InvMixColumns+0x178>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	460a      	mov	r2, r1
 8000d08:	705a      	strb	r2, [r3, #1]
        state[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8000d0a:	78fb      	ldrb	r3, [r7, #3]
 8000d0c:	210d      	movs	r1, #13
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff24 	bl	8000b5c <Multiply>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461c      	mov	r4, r3
 8000d18:	78bb      	ldrb	r3, [r7, #2]
 8000d1a:	2109      	movs	r1, #9
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff1d 	bl	8000b5c <Multiply>
 8000d22:	4603      	mov	r3, r0
 8000d24:	4063      	eors	r3, r4
 8000d26:	b2dc      	uxtb	r4, r3
 8000d28:	787b      	ldrb	r3, [r7, #1]
 8000d2a:	210e      	movs	r1, #14
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff15 	bl	8000b5c <Multiply>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4063      	eors	r3, r4
 8000d36:	b2dc      	uxtb	r4, r3
 8000d38:	783b      	ldrb	r3, [r7, #0]
 8000d3a:	210b      	movs	r1, #11
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff0d 	bl	8000b5c <Multiply>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4063      	eors	r3, r4
 8000d46:	b2d9      	uxtb	r1, r3
 8000d48:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <InvMixColumns+0x178>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	460a      	mov	r2, r1
 8000d52:	709a      	strb	r2, [r3, #2]
        state[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	210b      	movs	r1, #11
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff feff 	bl	8000b5c <Multiply>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461c      	mov	r4, r3
 8000d62:	78bb      	ldrb	r3, [r7, #2]
 8000d64:	210d      	movs	r1, #13
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fef8 	bl	8000b5c <Multiply>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4063      	eors	r3, r4
 8000d70:	b2dc      	uxtb	r4, r3
 8000d72:	787b      	ldrb	r3, [r7, #1]
 8000d74:	2109      	movs	r1, #9
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fef0 	bl	8000b5c <Multiply>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4063      	eors	r3, r4
 8000d80:	b2dc      	uxtb	r4, r3
 8000d82:	783b      	ldrb	r3, [r7, #0]
 8000d84:	210e      	movs	r1, #14
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fee8 	bl	8000b5c <Multiply>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4063      	eors	r3, r4
 8000d90:	b2d9      	uxtb	r1, r3
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <InvMixColumns+0x178>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	460a      	mov	r2, r1
 8000d9c:	70da      	strb	r2, [r3, #3]
    for(i = 0; i < 4; ++i) {
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3301      	adds	r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	f77f af50 	ble.w	8000c4c <InvMixColumns+0xc>
    }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd90      	pop	{r4, r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000088 	.word	0x20000088

08000dbc <InvSubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void
InvSubBytes(void) {
 8000dbc:	b5b0      	push	{r4, r5, r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
    uint8_t i, j;
    for(i = 0; i < 4; ++i) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	e01f      	b.n	8000e08 <InvSubBytes+0x4c>
        for(j = 0; j < 4; ++j) {
 8000dc8:	2300      	movs	r3, #0
 8000dca:	71bb      	strb	r3, [r7, #6]
 8000dcc:	e016      	b.n	8000dfc <InvSubBytes+0x40>
            state[j][i] = getSBoxInvert(state[j][i]);
 8000dce:	79ba      	ldrb	r2, [r7, #6]
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	4911      	ldr	r1, [pc, #68]	; (8000e18 <InvSubBytes+0x5c>)
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	440a      	add	r2, r1
 8000dd8:	4413      	add	r3, r2
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	79bd      	ldrb	r5, [r7, #6]
 8000dde:	79fc      	ldrb	r4, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fc0b 	bl	80005fc <getSBoxInvert>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4619      	mov	r1, r3
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <InvSubBytes+0x5c>)
 8000dec:	00ab      	lsls	r3, r5, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	4423      	add	r3, r4
 8000df2:	460a      	mov	r2, r1
 8000df4:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < 4; ++j) {
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	71bb      	strb	r3, [r7, #6]
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d9e5      	bls.n	8000dce <InvSubBytes+0x12>
    for(i = 0; i < 4; ++i) {
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	3301      	adds	r3, #1
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d9dc      	bls.n	8000dc8 <InvSubBytes+0xc>
        }
    }
}
 8000e0e:	bf00      	nop
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bdb0      	pop	{r4, r5, r7, pc}
 8000e18:	20000088 	.word	0x20000088

08000e1c <InvShiftRows>:

static void
InvShiftRows(void) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
    uint8_t temp;

    // Rotate first row 1 columns to right
    temp = state[3][1];
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <InvShiftRows+0x84>)
 8000e24:	7b5b      	ldrb	r3, [r3, #13]
 8000e26:	71fb      	strb	r3, [r7, #7]
    state[3][1] = state[2][1];
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <InvShiftRows+0x84>)
 8000e2a:	7a5a      	ldrb	r2, [r3, #9]
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <InvShiftRows+0x84>)
 8000e2e:	735a      	strb	r2, [r3, #13]
    state[2][1] = state[1][1];
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <InvShiftRows+0x84>)
 8000e32:	795a      	ldrb	r2, [r3, #5]
 8000e34:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <InvShiftRows+0x84>)
 8000e36:	725a      	strb	r2, [r3, #9]
    state[1][1] = state[0][1];
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <InvShiftRows+0x84>)
 8000e3a:	785a      	ldrb	r2, [r3, #1]
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <InvShiftRows+0x84>)
 8000e3e:	715a      	strb	r2, [r3, #5]
    state[0][1] = temp;
 8000e40:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <InvShiftRows+0x84>)
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	7053      	strb	r3, [r2, #1]

    // Rotate second row 2 columns to right
    temp = state[0][2];
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <InvShiftRows+0x84>)
 8000e48:	789b      	ldrb	r3, [r3, #2]
 8000e4a:	71fb      	strb	r3, [r7, #7]
    state[0][2] = state[2][2];
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <InvShiftRows+0x84>)
 8000e4e:	7a9a      	ldrb	r2, [r3, #10]
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <InvShiftRows+0x84>)
 8000e52:	709a      	strb	r2, [r3, #2]
    state[2][2] = temp;
 8000e54:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <InvShiftRows+0x84>)
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	7293      	strb	r3, [r2, #10]

    temp = state[1][2];
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <InvShiftRows+0x84>)
 8000e5c:	799b      	ldrb	r3, [r3, #6]
 8000e5e:	71fb      	strb	r3, [r7, #7]
    state[1][2] = state[3][2];
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <InvShiftRows+0x84>)
 8000e62:	7b9a      	ldrb	r2, [r3, #14]
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <InvShiftRows+0x84>)
 8000e66:	719a      	strb	r2, [r3, #6]
    state[3][2] = temp;
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <InvShiftRows+0x84>)
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	7393      	strb	r3, [r2, #14]

    // Rotate third row 3 columns to right
    temp = state[0][3];
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <InvShiftRows+0x84>)
 8000e70:	78db      	ldrb	r3, [r3, #3]
 8000e72:	71fb      	strb	r3, [r7, #7]
    state[0][3] = state[1][3];
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <InvShiftRows+0x84>)
 8000e76:	79da      	ldrb	r2, [r3, #7]
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <InvShiftRows+0x84>)
 8000e7a:	70da      	strb	r2, [r3, #3]
    state[1][3] = state[2][3];
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <InvShiftRows+0x84>)
 8000e7e:	7ada      	ldrb	r2, [r3, #11]
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <InvShiftRows+0x84>)
 8000e82:	71da      	strb	r2, [r3, #7]
    state[2][3] = state[3][3];
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <InvShiftRows+0x84>)
 8000e86:	7bda      	ldrb	r2, [r3, #15]
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <InvShiftRows+0x84>)
 8000e8a:	72da      	strb	r2, [r3, #11]
    state[3][3] = temp;
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <InvShiftRows+0x84>)
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	73d3      	strb	r3, [r2, #15]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000088 	.word	0x20000088

08000ea4 <Cipher>:

// Cipher is the main function that encrypts the PlainText.
static void
Cipher(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
    uint8_t round = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	71fb      	strb	r3, [r7, #7]

    // Add the First round key to the state before starting the rounds.
    AddRoundKey(0);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fcd0 	bl	8000854 <AddRoundKey>

    // There will be Nr rounds.
    // The first Nr-1 rounds are identical.
    // These Nr-1 rounds are executed in the loop below.
    for(round = 1; round < Nr; ++round) {
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	e00c      	b.n	8000ed4 <Cipher+0x30>
        SubBytes();
 8000eba:	f7ff fd07 	bl	80008cc <SubBytes>
        ShiftRows();
 8000ebe:	f7ff fd35 	bl	800092c <ShiftRows>
        MixColumns();
 8000ec2:	f7ff fd95 	bl	80009f0 <MixColumns>
        AddRoundKey(round);
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fcc3 	bl	8000854 <AddRoundKey>
    for(round = 1; round < Nr; ++round) {
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <Cipher+0x54>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	79fa      	ldrb	r2, [r7, #7]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d3ed      	bcc.n	8000eba <Cipher+0x16>
    }

    // The last round is given below.
    // The MixColumns function is not here in the last round.
    SubBytes();
 8000ede:	f7ff fcf5 	bl	80008cc <SubBytes>
    ShiftRows();
 8000ee2:	f7ff fd23 	bl	800092c <ShiftRows>
    AddRoundKey(Nr);
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <Cipher+0x54>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fcb2 	bl	8000854 <AddRoundKey>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000086 	.word	0x20000086

08000efc <InvCipher>:

static void
InvCipher(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
    uint8_t round = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	71fb      	strb	r3, [r7, #7]

    // Add the First round key to the state before starting the rounds.
    AddRoundKey(Nr);
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <InvCipher+0x54>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fca2 	bl	8000854 <AddRoundKey>

    // There will be Nr rounds.
    // The first Nr-1 rounds are identical.
    // These Nr-1 rounds are executed in the loop below.
    for(round = Nr-1; round > 0; round--) {
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <InvCipher+0x54>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	e00c      	b.n	8000f34 <InvCipher+0x38>
        InvShiftRows();
 8000f1a:	f7ff ff7f 	bl	8000e1c <InvShiftRows>
        InvSubBytes();
 8000f1e:	f7ff ff4d 	bl	8000dbc <InvSubBytes>
        AddRoundKey(round);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fc95 	bl	8000854 <AddRoundKey>
        InvMixColumns();
 8000f2a:	f7ff fe89 	bl	8000c40 <InvMixColumns>
    for(round = Nr-1; round > 0; round--) {
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1ef      	bne.n	8000f1a <InvCipher+0x1e>
    }

    // The last round is given below.
    // The MixColumns function is not here in the last round.
    InvShiftRows();
 8000f3a:	f7ff ff6f 	bl	8000e1c <InvShiftRows>
    InvSubBytes();
 8000f3e:	f7ff ff3d 	bl	8000dbc <InvSubBytes>
    AddRoundKey(0);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff fc86 	bl	8000854 <AddRoundKey>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000086 	.word	0x20000086

08000f54 <aes_ecb>:

void
aes_ecb(uint32_t* key, uint32_t* input, uint32_t* output, uint8_t* crypt_config) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	603b      	str	r3, [r7, #0]
    uint8_t i;

    // Copy input to state
    for(i = 0; i < 4; i++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	75fb      	strb	r3, [r7, #23]
 8000f66:	e033      	b.n	8000fd0 <aes_ecb+0x7c>
        state[i][0] = ((input[i] >> 24) & 0xFF);
 8000f68:	7dfb      	ldrb	r3, [r7, #23]
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	4413      	add	r3, r2
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	0e1a      	lsrs	r2, r3, #24
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	b2d1      	uxtb	r1, r2
 8000f78:	4a47      	ldr	r2, [pc, #284]	; (8001098 <aes_ecb+0x144>)
 8000f7a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        state[i][1] = ((input[i] >> 16) & 0xFF);
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	4413      	add	r3, r2
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	0c1a      	lsrs	r2, r3, #16
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	b2d1      	uxtb	r1, r2
 8000f8e:	4a42      	ldr	r2, [pc, #264]	; (8001098 <aes_ecb+0x144>)
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	460a      	mov	r2, r1
 8000f96:	705a      	strb	r2, [r3, #1]
        state[i][2] = ((input[i] >>  8) & 0xFF);
 8000f98:	7dfb      	ldrb	r3, [r7, #23]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	0a1a      	lsrs	r2, r3, #8
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	b2d1      	uxtb	r1, r2
 8000fa8:	4a3b      	ldr	r2, [pc, #236]	; (8001098 <aes_ecb+0x144>)
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	460a      	mov	r2, r1
 8000fb0:	709a      	strb	r2, [r3, #2]
        state[i][3] =  (input[i]        & 0xFF);
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	4413      	add	r3, r2
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
 8000fbe:	b2d1      	uxtb	r1, r2
 8000fc0:	4a35      	ldr	r2, [pc, #212]	; (8001098 <aes_ecb+0x144>)
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	460a      	mov	r2, r1
 8000fc8:	70da      	strb	r2, [r3, #3]
    for(i = 0; i < 4; i++) {
 8000fca:	7dfb      	ldrb	r3, [r7, #23]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	75fb      	strb	r3, [r7, #23]
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d9c8      	bls.n	8000f68 <aes_ecb+0x14>
    }

    // Update some private variables
    switch (crypt_config[2]) {
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	3302      	adds	r3, #2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d00b      	beq.n	8000ff8 <aes_ecb+0xa4>
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d113      	bne.n	800100c <aes_ecb+0xb8>
        case 2  : Nk = 8; KEYLEN = 32; Nr = 14; break; // 256 bits
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <aes_ecb+0x148>)
 8000fe6:	2208      	movs	r2, #8
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <aes_ecb+0x14c>)
 8000fec:	2220      	movs	r2, #32
 8000fee:	701a      	strb	r2, [r3, #0]
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <aes_ecb+0x150>)
 8000ff2:	220e      	movs	r2, #14
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	e013      	b.n	8001020 <aes_ecb+0xcc>
        case 1  : Nk = 6; KEYLEN = 24; Nr = 12; break; // 192 bits
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <aes_ecb+0x148>)
 8000ffa:	2206      	movs	r2, #6
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <aes_ecb+0x14c>)
 8001000:	2218      	movs	r2, #24
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <aes_ecb+0x150>)
 8001006:	220c      	movs	r2, #12
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e009      	b.n	8001020 <aes_ecb+0xcc>
        default : Nk = 4; KEYLEN = 16; Nr = 10; break; // 128 bits
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <aes_ecb+0x148>)
 800100e:	2204      	movs	r2, #4
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <aes_ecb+0x14c>)
 8001014:	2210      	movs	r2, #16
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <aes_ecb+0x150>)
 800101a:	220a      	movs	r2, #10
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	bf00      	nop
    }

    // The KeyExpansion routine must be called before encryption
    Key = key;
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <aes_ecb+0x154>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6013      	str	r3, [r2, #0]
    KeyExpansion();
 8001026:	f7ff faf9 	bl	800061c <KeyExpansion>

    // The next function call encrypts the PlainText with the Key using AES algorithm
    if (crypt_config[0])
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <aes_ecb+0xe4>
        Cipher();
 8001032:	f7ff ff37 	bl	8000ea4 <Cipher>
 8001036:	e001      	b.n	800103c <aes_ecb+0xe8>
    else
        InvCipher();
 8001038:	f7ff ff60 	bl	8000efc <InvCipher>

    // Copy state to output
    for(i = 0; i < 4; i++) {
 800103c:	2300      	movs	r3, #0
 800103e:	75fb      	strb	r3, [r7, #23]
 8001040:	e021      	b.n	8001086 <aes_ecb+0x132>
        output[i] = (state[i][0] << 24) + (state[i][1] << 16) + (state[i][2] << 8) + state[i][3];
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	4a14      	ldr	r2, [pc, #80]	; (8001098 <aes_ecb+0x144>)
 8001046:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800104a:	061a      	lsls	r2, r3, #24
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	4912      	ldr	r1, [pc, #72]	; (8001098 <aes_ecb+0x144>)
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	785b      	ldrb	r3, [r3, #1]
 8001056:	041b      	lsls	r3, r3, #16
 8001058:	441a      	add	r2, r3
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	490e      	ldr	r1, [pc, #56]	; (8001098 <aes_ecb+0x144>)
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	789b      	ldrb	r3, [r3, #2]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	441a      	add	r2, r3
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	490b      	ldr	r1, [pc, #44]	; (8001098 <aes_ecb+0x144>)
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	78db      	ldrb	r3, [r3, #3]
 8001072:	18d1      	adds	r1, r2, r3
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	460a      	mov	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 4; i++) {
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	3301      	adds	r3, #1
 8001084:	75fb      	strb	r3, [r7, #23]
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	2b03      	cmp	r3, #3
 800108a:	d9da      	bls.n	8001042 <aes_ecb+0xee>
    }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000088 	.word	0x20000088
 800109c:	20000084 	.word	0x20000084
 80010a0:	20000085 	.word	0x20000085
 80010a4:	20000086 	.word	0x20000086
 80010a8:	20000188 	.word	0x20000188

080010ac <crypt_aes>:

//-----------------------------------------------------------------------------
// Main Functions
//-----------------------------------------------------------------------------
uint32_t *crypt_aes(uint32_t* text, uint32_t *cipher, uint32_t mlen, uint32_t *key, uint8_t mode) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
    uint32_t plan[4];//, cipher[4];
    uint8_t crypt_config[5]; //0: enc_dec, 1: plan_size, 2: key_size, 3: msg_size(numWords), 4: algorithm

    //~ MappPrintf(id, PRINT_STR, (void *)_start);

    for (i = 0; i < mlen/4; i++){
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010be:	e058      	b.n	8001172 <crypt_aes+0xc6>
        // Write CRYPT_PLAN
        switch (i%2) {
 80010c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	bfb8      	it	lt
 80010ca:	425b      	neglt	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <crypt_aes+0x2a>
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d01c      	beq.n	800110e <crypt_aes+0x62>
 80010d4:	e037      	b.n	8001146 <crypt_aes+0x9a>
            case 0 : plan[0] = text[4*i+0];  //AES-128 - ENC
 80010d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4413      	add	r3, r2
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61fb      	str	r3, [r7, #28]
					 plan[1] = text[4*i+1];  //AES-128 - ENC
 80010e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	3304      	adds	r3, #4
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	623b      	str	r3, [r7, #32]
					 plan[2] = text[4*i+2];  //AES-128 - ENC
 80010f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	3308      	adds	r3, #8
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
					 plan[3] = text[4*i+3]; break; //AES-128 - ENC
 80010fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	330c      	adds	r3, #12
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
 800110c:	e01b      	b.n	8001146 <crypt_aes+0x9a>

            case 1 : plan[0] = text[4*i+0];  //AES-128 - DEC
 800110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	4413      	add	r3, r2
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61fb      	str	r3, [r7, #28]
					 plan[1] = text[4*i+1];  //AES-128 - DEC
 800111a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	3304      	adds	r3, #4
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	623b      	str	r3, [r7, #32]
					 plan[2] = text[4*i+2];  //AES-128 - DEC
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	3308      	adds	r3, #8
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
					 plan[3] = text[4*i+3]; break; //AES-128 - DEC
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	330c      	adds	r3, #12
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
 8001144:	bf00      	nop
        }

        // Write CRYPT_CONFIG
        crypt_config[0] = mode; //0: dec, 1: enc (Enc_Dec)
 8001146:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800114a:	753b      	strb	r3, [r7, #20]
        crypt_config[1] = 1; //1: 128 bits (Plan Size)
 800114c:	2301      	movs	r3, #1
 800114e:	757b      	strb	r3, [r7, #21]
        crypt_config[2] = 0; //0: 128 bits, 1: 192 bits, 2: 256 bits (Key Size)
 8001150:	2300      	movs	r3, #0
 8001152:	75bb      	strb	r3, [r7, #22]
        crypt_config[3] = 4; //4: Number of words in the message
 8001154:	2304      	movs	r3, #4
 8001156:	75fb      	strb	r3, [r7, #23]
        crypt_config[4] = 0; //0: AES (algorithm)
 8001158:	2300      	movs	r3, #0
 800115a:	763b      	strb	r3, [r7, #24]
        aes_ecb(key, plan, cipher, crypt_config); // C Application
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	f107 011c 	add.w	r1, r7, #28
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	6838      	ldr	r0, [r7, #0]
 8001168:	f7ff fef4 	bl	8000f54 <aes_ecb>
    for (i = 0; i < mlen/4; i++){
 800116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116e:	3301      	adds	r3, #1
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	089a      	lsrs	r2, r3, #2
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	429a      	cmp	r2, r3
 800117a:	d8a1      	bhi.n	80010c0 <crypt_aes+0x14>

    }
    return cipher;
 800117c:	68bb      	ldr	r3, [r7, #8]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3730      	adds	r7, #48	; 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <__io_putchar>:
* @brief Retargets the C library printf function to the USART.
* @param None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xFFFF);
 8001190:	1d39      	adds	r1, r7, #4
 8001192:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001196:	2201      	movs	r2, #1
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <__io_putchar+0x20>)
 800119a:	f002 fc39 	bl	8003a10 <HAL_UART_Transmit>
	return ch;
 800119e:	687b      	ldr	r3, [r7, #4]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200001d8 	.word	0x200001d8

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b09c      	sub	sp, #112	; 0x70
 80011b0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// Define 256-bit cryptographic key
	  uint32_t key[8] = {0xDEADBEEF, 0x01234567, 0x89ABCDEF, 0xDEADBEEF,
 80011b2:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <main+0x124>)
 80011b4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80011b8:	461d      	mov	r5, r3
 80011ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	  	  0xDEADBEEF, 0x01234567, 0x89ABCDEF, 0xDEADBEEF};

	  // Define hex representation of message to be encrypted
	  uint32_t msg[4] = {0xBEEFFEED, 0xBEEFDEAD, 0xFEEDBEEF, 0xDEADBEEF};
 80011c6:	4b43      	ldr	r3, [pc, #268]	; (80012d4 <main+0x128>)
 80011c8:	f107 0420 	add.w	r4, r7, #32
 80011cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  uint32_t mlen = sizeof(msg)/sizeof(uint32_t); // length of message
 80011d2:	2304      	movs	r3, #4
 80011d4:	65bb      	str	r3, [r7, #88]	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f000 fc94 	bl	8001b02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011da:	f000 f88b 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011de:	f000 f97d 	bl	80014dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80011e2:	f000 f91d 	bl	8001420 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011e6:	f000 f94b 	bl	8001480 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM11_Init();
 80011ea:	f000 f8f5 	bl	80013d8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  //give 2 new line
  printf("\r\n\n");
 80011ee:	483a      	ldr	r0, [pc, #232]	; (80012d8 <main+0x12c>)
 80011f0:	f003 fcc8 	bl	8004b84 <puts>

  HAL_TIM_Base_Start(&htim11);
 80011f4:	4839      	ldr	r0, [pc, #228]	; (80012dc <main+0x130>)
 80011f6:	f002 faad 	bl	8003754 <HAL_TIM_Base_Start>
  // run 100 times
  int n = 100;
 80011fa:	2364      	movs	r3, #100	; 0x64
 80011fc:	657b      	str	r3, [r7, #84]	; 0x54
  for (int i = 0; i < n; i++) {
 80011fe:	2300      	movs	r3, #0
 8001200:	667b      	str	r3, [r7, #100]	; 0x64
 8001202:	e05f      	b.n	80012c4 <main+0x118>
  // Call AES function (via macro)
  time_val = __HAL_TIM_GET_COUNTER(&htim11);
 8001204:	4b35      	ldr	r3, [pc, #212]	; (80012dc <main+0x130>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
  ENCRYPT_AES(msg, ct, mlen, key);
 800120e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001212:	f107 0110 	add.w	r1, r7, #16
 8001216:	f107 0020 	add.w	r0, r7, #32
 800121a:	2201      	movs	r2, #1
 800121c:	9200      	str	r2, [sp, #0]
 800121e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001220:	f7ff ff44 	bl	80010ac <crypt_aes>
  DECRYPT_AES(ct, dt, mlen, key);
 8001224:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001228:	4639      	mov	r1, r7
 800122a:	f107 0010 	add.w	r0, r7, #16
 800122e:	2200      	movs	r2, #0
 8001230:	9200      	str	r2, [sp, #0]
 8001232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001234:	f7ff ff3a 	bl	80010ac <crypt_aes>

  // Print to PuTTY
  printf("Plaintext: { ");
 8001238:	4829      	ldr	r0, [pc, #164]	; (80012e0 <main+0x134>)
 800123a:	f003 fc3d 	bl	8004ab8 <iprintf>
  for (int i=0;i<mlen;i++)
 800123e:	2300      	movs	r3, #0
 8001240:	663b      	str	r3, [r7, #96]	; 0x60
 8001242:	e00c      	b.n	800125e <main+0xb2>
	  printf("%04x ",msg[i]);
 8001244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	3368      	adds	r3, #104	; 0x68
 800124a:	443b      	add	r3, r7
 800124c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001250:	4619      	mov	r1, r3
 8001252:	4824      	ldr	r0, [pc, #144]	; (80012e4 <main+0x138>)
 8001254:	f003 fc30 	bl	8004ab8 <iprintf>
  for (int i=0;i<mlen;i++)
 8001258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800125a:	3301      	adds	r3, #1
 800125c:	663b      	str	r3, [r7, #96]	; 0x60
 800125e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001260:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001262:	429a      	cmp	r2, r3
 8001264:	d8ee      	bhi.n	8001244 <main+0x98>
  printf("}\r\n");
 8001266:	4820      	ldr	r0, [pc, #128]	; (80012e8 <main+0x13c>)
 8001268:	f003 fc8c 	bl	8004b84 <puts>
//  printf("Ciphertext: { ");
//  for (int i=0;i<mlen;i++)
//	  printf("%04x ",ct[i]);
//  printf("}\r\n");
//
  printf("Deciphered text: { ");
 800126c:	481f      	ldr	r0, [pc, #124]	; (80012ec <main+0x140>)
 800126e:	f003 fc23 	bl	8004ab8 <iprintf>
  for (int i=0;i<mlen;i++)
 8001272:	2300      	movs	r3, #0
 8001274:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001276:	e00c      	b.n	8001292 <main+0xe6>
	  printf("%04x ",dt[i]);
 8001278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	3368      	adds	r3, #104	; 0x68
 800127e:	443b      	add	r3, r7
 8001280:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8001284:	4619      	mov	r1, r3
 8001286:	4817      	ldr	r0, [pc, #92]	; (80012e4 <main+0x138>)
 8001288:	f003 fc16 	bl	8004ab8 <iprintf>
  for (int i=0;i<mlen;i++)
 800128c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800128e:	3301      	adds	r3, #1
 8001290:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001294:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001296:	429a      	cmp	r2, r3
 8001298:	d8ee      	bhi.n	8001278 <main+0xcc>
  printf("}\r\n");
 800129a:	4813      	ldr	r0, [pc, #76]	; (80012e8 <main+0x13c>)
 800129c:	f003 fc72 	bl	8004b84 <puts>
  time_val = __HAL_TIM_GET_COUNTER(&htim11) - time_val;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <main+0x130>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
  printf("%u us\r\n", time_val);
 80012b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80012b6:	4619      	mov	r1, r3
 80012b8:	480d      	ldr	r0, [pc, #52]	; (80012f0 <main+0x144>)
 80012ba:	f003 fbfd 	bl	8004ab8 <iprintf>
  for (int i = 0; i < n; i++) {
 80012be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012c0:	3301      	adds	r3, #1
 80012c2:	667b      	str	r3, [r7, #100]	; 0x64
 80012c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80012c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c8:	429a      	cmp	r2, r3
 80012ca:	db9b      	blt.n	8001204 <main+0x58>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <main+0x120>
 80012ce:	bf00      	nop
 80012d0:	080058ac 	.word	0x080058ac
 80012d4:	080058cc 	.word	0x080058cc
 80012d8:	08005870 	.word	0x08005870
 80012dc:	2000018c 	.word	0x2000018c
 80012e0:	08005874 	.word	0x08005874
 80012e4:	08005884 	.word	0x08005884
 80012e8:	0800588c 	.word	0x0800588c
 80012ec:	08005890 	.word	0x08005890
 80012f0:	080058a4 	.word	0x080058a4

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	; 0x50
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	2234      	movs	r2, #52	; 0x34
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fd1e 	bl	8004d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001318:	f001 f868 	bl	80023ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800131c:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <SystemClock_Config+0xdc>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	4a2b      	ldr	r2, [pc, #172]	; (80013d0 <SystemClock_Config+0xdc>)
 8001322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001326:	6413      	str	r3, [r2, #64]	; 0x40
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <SystemClock_Config+0xdc>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <SystemClock_Config+0xe0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800133c:	4a25      	ldr	r2, [pc, #148]	; (80013d4 <SystemClock_Config+0xe0>)
 800133e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <SystemClock_Config+0xe0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001350:	2301      	movs	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001354:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001358:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135a:	2302      	movs	r3, #2
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800135e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001362:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001364:	2304      	movs	r3, #4
 8001366:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001368:	2360      	movs	r3, #96	; 0x60
 800136a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800136c:	2302      	movs	r3, #2
 800136e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001370:	2304      	movs	r3, #4
 8001372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001374:	2302      	movs	r3, #2
 8001376:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4618      	mov	r0, r3
 800137e:	f001 f895 	bl	80024ac <HAL_RCC_OscConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001388:	f000 f98e 	bl	80016a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800138c:	f001 f83e 	bl	800240c <HAL_PWREx_EnableOverDrive>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001396:	f000 f987 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139a:	230f      	movs	r3, #15
 800139c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139e:	2302      	movs	r3, #2
 80013a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	2103      	movs	r1, #3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 fb26 	bl	8002a08 <HAL_RCC_ClockConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013c2:	f000 f971 	bl	80016a8 <Error_Handler>
  }
}
 80013c6:	bf00      	nop
 80013c8:	3750      	adds	r7, #80	; 0x50
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40007000 	.word	0x40007000

080013d8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_TIM11_Init+0x40>)
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <MX_TIM11_Init+0x44>)
 80013e0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 96-1;
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <MX_TIM11_Init+0x40>)
 80013e4:	225f      	movs	r2, #95	; 0x5f
 80013e6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_TIM11_Init+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MX_TIM11_Init+0x40>)
 80013f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013f4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_TIM11_Init+0x40>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_TIM11_Init+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_TIM11_Init+0x40>)
 8001404:	f002 f94e 	bl	80036a4 <HAL_TIM_Base_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800140e:	f000 f94b 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000018c 	.word	0x2000018c
 800141c:	40014800 	.word	0x40014800

08001420 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_USART3_UART_Init+0x58>)
 8001426:	4a15      	ldr	r2, [pc, #84]	; (800147c <MX_USART3_UART_Init+0x5c>)
 8001428:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <MX_USART3_UART_Init+0x58>)
 800142c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001430:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_USART3_UART_Init+0x58>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_USART3_UART_Init+0x58>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_USART3_UART_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_USART3_UART_Init+0x58>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_USART3_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_USART3_UART_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_USART3_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_USART3_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_USART3_UART_Init+0x58>)
 8001464:	f002 fa86 	bl	8003974 <HAL_UART_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800146e:	f000 f91b 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200001d8 	.word	0x200001d8
 800147c:	40004800 	.word	0x40004800

08001480 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001486:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800148a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800148e:	2206      	movs	r2, #6
 8001490:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001494:	2202      	movs	r2, #2
 8001496:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a0:	2202      	movs	r2, #2
 80014a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c4:	f000 fe49 	bl	800215a <HAL_PCD_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014ce:	f000 f8eb 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000260 	.word	0x20000260

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	4b68      	ldr	r3, [pc, #416]	; (8001694 <MX_GPIO_Init+0x1b8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a67      	ldr	r2, [pc, #412]	; (8001694 <MX_GPIO_Init+0x1b8>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b65      	ldr	r3, [pc, #404]	; (8001694 <MX_GPIO_Init+0x1b8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	61bb      	str	r3, [r7, #24]
 8001508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150a:	4b62      	ldr	r3, [pc, #392]	; (8001694 <MX_GPIO_Init+0x1b8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a61      	ldr	r2, [pc, #388]	; (8001694 <MX_GPIO_Init+0x1b8>)
 8001510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <MX_GPIO_Init+0x1b8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b5c      	ldr	r3, [pc, #368]	; (8001694 <MX_GPIO_Init+0x1b8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a5b      	ldr	r2, [pc, #364]	; (8001694 <MX_GPIO_Init+0x1b8>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b59      	ldr	r3, [pc, #356]	; (8001694 <MX_GPIO_Init+0x1b8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b56      	ldr	r3, [pc, #344]	; (8001694 <MX_GPIO_Init+0x1b8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a55      	ldr	r2, [pc, #340]	; (8001694 <MX_GPIO_Init+0x1b8>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b53      	ldr	r3, [pc, #332]	; (8001694 <MX_GPIO_Init+0x1b8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001552:	4b50      	ldr	r3, [pc, #320]	; (8001694 <MX_GPIO_Init+0x1b8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a4f      	ldr	r2, [pc, #316]	; (8001694 <MX_GPIO_Init+0x1b8>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b4d      	ldr	r3, [pc, #308]	; (8001694 <MX_GPIO_Init+0x1b8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800156a:	4b4a      	ldr	r3, [pc, #296]	; (8001694 <MX_GPIO_Init+0x1b8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a49      	ldr	r2, [pc, #292]	; (8001694 <MX_GPIO_Init+0x1b8>)
 8001570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b47      	ldr	r3, [pc, #284]	; (8001694 <MX_GPIO_Init+0x1b8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f244 0181 	movw	r1, #16513	; 0x4081
 8001588:	4843      	ldr	r0, [pc, #268]	; (8001698 <MX_GPIO_Init+0x1bc>)
 800158a:	f000 fdcd 	bl	8002128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2140      	movs	r1, #64	; 0x40
 8001592:	4842      	ldr	r0, [pc, #264]	; (800169c <MX_GPIO_Init+0x1c0>)
 8001594:	f000 fdc8 	bl	8002128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800159e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	483c      	ldr	r0, [pc, #240]	; (80016a0 <MX_GPIO_Init+0x1c4>)
 80015b0:	f000 fc0e 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015b4:	2332      	movs	r3, #50	; 0x32
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015c4:	230b      	movs	r3, #11
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	4834      	ldr	r0, [pc, #208]	; (80016a0 <MX_GPIO_Init+0x1c4>)
 80015d0:	f000 fbfe 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015d4:	2386      	movs	r3, #134	; 0x86
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e4:	230b      	movs	r3, #11
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	482d      	ldr	r0, [pc, #180]	; (80016a4 <MX_GPIO_Init+0x1c8>)
 80015f0:	f000 fbee 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80015f4:	f244 0381 	movw	r3, #16513	; 0x4081
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4822      	ldr	r0, [pc, #136]	; (8001698 <MX_GPIO_Init+0x1bc>)
 800160e:	f000 fbdf 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001624:	230b      	movs	r3, #11
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	481a      	ldr	r0, [pc, #104]	; (8001698 <MX_GPIO_Init+0x1bc>)
 8001630:	f000 fbce 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001634:	2340      	movs	r3, #64	; 0x40
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4814      	ldr	r0, [pc, #80]	; (800169c <MX_GPIO_Init+0x1c0>)
 800164c:	f000 fbc0 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	480e      	ldr	r0, [pc, #56]	; (800169c <MX_GPIO_Init+0x1c0>)
 8001664:	f000 fbb4 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001668:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800166c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800167a:	230b      	movs	r3, #11
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_GPIO_Init+0x1c0>)
 8001686:	f000 fba3 	bl	8001dd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800168a:	bf00      	nop
 800168c:	3730      	adds	r7, #48	; 0x30
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40020400 	.word	0x40020400
 800169c:	40021800 	.word	0x40021800
 80016a0:	40020800 	.word	0x40020800
 80016a4:	40020000 	.word	0x40020000

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <Error_Handler+0x8>
	...

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_MspInit+0x44>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_MspInit+0x44>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_MspInit+0x44>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_MspInit+0x44>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_MspInit+0x44>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_MspInit+0x44>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_TIM_Base_MspInit+0x38>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d10b      	bne.n	8001726 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_TIM_Base_MspInit+0x3c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <HAL_TIM_Base_MspInit+0x3c>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <HAL_TIM_Base_MspInit+0x3c>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40014800 	.word	0x40014800
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b0ae      	sub	sp, #184	; 0xb8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2290      	movs	r2, #144	; 0x90
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f003 faf1 	bl	8004d44 <memset>
  if(huart->Instance==USART3)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <HAL_UART_MspInit+0xb4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d13c      	bne.n	80017e6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800176c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001770:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001772:	2300      	movs	r3, #0
 8001774:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4618      	mov	r0, r3
 800177c:	f001 fb6a 	bl	8002e54 <HAL_RCCEx_PeriphCLKConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001786:	f7ff ff8f 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <HAL_UART_MspInit+0xb8>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <HAL_UART_MspInit+0xb8>)
 8001790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_UART_MspInit+0xb8>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_UART_MspInit+0xb8>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <HAL_UART_MspInit+0xb8>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_UART_MspInit+0xb8>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017d4:	2307      	movs	r3, #7
 80017d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <HAL_UART_MspInit+0xbc>)
 80017e2:	f000 faf5 	bl	8001dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	37b8      	adds	r7, #184	; 0xb8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40004800 	.word	0x40004800
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020c00 	.word	0x40020c00

080017fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b0ae      	sub	sp, #184	; 0xb8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2290      	movs	r2, #144	; 0x90
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f003 fa91 	bl	8004d44 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800182a:	d159      	bne.n	80018e0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800182c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001830:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4618      	mov	r0, r3
 800183e:	f001 fb09 	bl	8002e54 <HAL_RCCEx_PeriphCLKConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001848:	f7ff ff2e 	bl	80016a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184c:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <HAL_PCD_MspInit+0xec>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	4a25      	ldr	r2, [pc, #148]	; (80018e8 <HAL_PCD_MspInit+0xec>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6313      	str	r3, [r2, #48]	; 0x30
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <HAL_PCD_MspInit+0xec>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001864:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001868:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800187e:	230a      	movs	r3, #10
 8001880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001888:	4619      	mov	r1, r3
 800188a:	4818      	ldr	r0, [pc, #96]	; (80018ec <HAL_PCD_MspInit+0xf0>)
 800188c:	f000 faa0 	bl	8001dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001894:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018a8:	4619      	mov	r1, r3
 80018aa:	4810      	ldr	r0, [pc, #64]	; (80018ec <HAL_PCD_MspInit+0xf0>)
 80018ac:	f000 fa90 	bl	8001dd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018b0:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_PCD_MspInit+0xec>)
 80018b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b4:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <HAL_PCD_MspInit+0xec>)
 80018b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ba:	6353      	str	r3, [r2, #52]	; 0x34
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_PCD_MspInit+0xec>)
 80018be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <HAL_PCD_MspInit+0xec>)
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <HAL_PCD_MspInit+0xec>)
 80018ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d2:	6453      	str	r3, [r2, #68]	; 0x44
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_PCD_MspInit+0xec>)
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80018e0:	bf00      	nop
 80018e2:	37b8      	adds	r7, #184	; 0xb8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020000 	.word	0x40020000

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f4:	e7fe      	b.n	80018f4 <NMI_Handler+0x4>

080018f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <HardFault_Handler+0x4>

080018fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <MemManage_Handler+0x4>

08001902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <BusFault_Handler+0x4>

08001908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <UsageFault_Handler+0x4>

0800190e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193c:	f000 f91e 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	e00a      	b.n	800196c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001956:	f3af 8000 	nop.w
 800195a:	4601      	mov	r1, r0
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	60ba      	str	r2, [r7, #8]
 8001962:	b2ca      	uxtb	r2, r1
 8001964:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	dbf0      	blt.n	8001956 <_read+0x12>
  }

  return len;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	e009      	b.n	80019a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	60ba      	str	r2, [r7, #8]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fbf5 	bl	8001188 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	dbf1      	blt.n	8001990 <_write+0x12>
  }
  return len;
 80019ac:	687b      	ldr	r3, [r7, #4]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <_close>:

int _close(int file)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019de:	605a      	str	r2, [r3, #4]
  return 0;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_isatty>:

int _isatty(int file)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <_sbrk+0x5c>)
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <_sbrk+0x60>)
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <_sbrk+0x64>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <_sbrk+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d207      	bcs.n	8001a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a50:	f003 f9c6 	bl	8004de0 <__errno>
 8001a54:	4603      	mov	r3, r0
 8001a56:	220c      	movs	r2, #12
 8001a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	e009      	b.n	8001a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <_sbrk+0x64>)
 8001a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20080000 	.word	0x20080000
 8001a80:	00000400 	.word	0x00000400
 8001a84:	20000768 	.word	0x20000768
 8001a88:	200008c0 	.word	0x200008c0

08001a8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <SystemInit+0x20>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <SystemInit+0x20>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab4:	480d      	ldr	r0, [pc, #52]	; (8001aec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ab6:	490e      	ldr	r1, [pc, #56]	; (8001af0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ab8:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001abc:	e002      	b.n	8001ac4 <LoopCopyDataInit>

08001abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac2:	3304      	adds	r3, #4

08001ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac8:	d3f9      	bcc.n	8001abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aca:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001acc:	4c0b      	ldr	r4, [pc, #44]	; (8001afc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad0:	e001      	b.n	8001ad6 <LoopFillZerobss>

08001ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad4:	3204      	adds	r2, #4

08001ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad8:	d3fb      	bcc.n	8001ad2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ada:	f7ff ffd7 	bl	8001a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ade:	f003 f985 	bl	8004dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae2:	f7ff fb63 	bl	80011ac <main>
  bx  lr    
 8001ae6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ae8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001af4:	08005c38 	.word	0x08005c38
  ldr r2, =_sbss
 8001af8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001afc:	200008bc 	.word	0x200008bc

08001b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC_IRQHandler>

08001b02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b06:	2003      	movs	r0, #3
 8001b08:	f000 f92e 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f000 f805 	bl	8001b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b12:	f7ff fdcf 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_InitTick+0x54>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_InitTick+0x58>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f93b 	bl	8001db6 <HAL_SYSTICK_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00e      	b.n	8001b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d80a      	bhi.n	8001b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f000 f911 	bl	8001d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b5c:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <HAL_InitTick+0x5c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000008 	.word	0x20000008
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	2000076c 	.word	0x2000076c

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	2000076c 	.word	0x2000076c

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff ffee 	bl	8001ba4 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_Delay+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffde 	bl	8001ba4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000008 	.word	0x20000008

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <__NVIC_SetPriorityGrouping+0x40>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <__NVIC_SetPriorityGrouping+0x40>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00
 8001c48:	05fa0000 	.word	0x05fa0000

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <SysTick_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d42:	210f      	movs	r1, #15
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f7ff ff8e 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SysTick_Config+0x40>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SysTick_Config+0x40>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff47 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff5c 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ff8e 	bl	8001cbc <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff5d 	bl	8001c68 <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffb0 	bl	8001d24 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	e175      	b.n	80020dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f040 8164 	bne.w	80020d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d005      	beq.n	8001e26 <HAL_GPIO_Init+0x56>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d130      	bne.n	8001e88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	2203      	movs	r2, #3
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 0201 	and.w	r2, r3, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d017      	beq.n	8001ec4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d123      	bne.n	8001f18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	08da      	lsrs	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3208      	adds	r2, #8
 8001ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0203 	and.w	r2, r3, #3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80be 	beq.w	80020d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	4b66      	ldr	r3, [pc, #408]	; (80020f4 <HAL_GPIO_Init+0x324>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	4a65      	ldr	r2, [pc, #404]	; (80020f4 <HAL_GPIO_Init+0x324>)
 8001f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f64:	6453      	str	r3, [r2, #68]	; 0x44
 8001f66:	4b63      	ldr	r3, [pc, #396]	; (80020f4 <HAL_GPIO_Init+0x324>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f72:	4a61      	ldr	r2, [pc, #388]	; (80020f8 <HAL_GPIO_Init+0x328>)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	3302      	adds	r3, #2
 8001f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	220f      	movs	r2, #15
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a58      	ldr	r2, [pc, #352]	; (80020fc <HAL_GPIO_Init+0x32c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d037      	beq.n	800200e <HAL_GPIO_Init+0x23e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a57      	ldr	r2, [pc, #348]	; (8002100 <HAL_GPIO_Init+0x330>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d031      	beq.n	800200a <HAL_GPIO_Init+0x23a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a56      	ldr	r2, [pc, #344]	; (8002104 <HAL_GPIO_Init+0x334>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02b      	beq.n	8002006 <HAL_GPIO_Init+0x236>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a55      	ldr	r2, [pc, #340]	; (8002108 <HAL_GPIO_Init+0x338>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d025      	beq.n	8002002 <HAL_GPIO_Init+0x232>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a54      	ldr	r2, [pc, #336]	; (800210c <HAL_GPIO_Init+0x33c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01f      	beq.n	8001ffe <HAL_GPIO_Init+0x22e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a53      	ldr	r2, [pc, #332]	; (8002110 <HAL_GPIO_Init+0x340>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d019      	beq.n	8001ffa <HAL_GPIO_Init+0x22a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a52      	ldr	r2, [pc, #328]	; (8002114 <HAL_GPIO_Init+0x344>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0x226>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a51      	ldr	r2, [pc, #324]	; (8002118 <HAL_GPIO_Init+0x348>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_GPIO_Init+0x222>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a50      	ldr	r2, [pc, #320]	; (800211c <HAL_GPIO_Init+0x34c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x21e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4f      	ldr	r2, [pc, #316]	; (8002120 <HAL_GPIO_Init+0x350>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_GPIO_Init+0x21a>
 8001fe6:	2309      	movs	r3, #9
 8001fe8:	e012      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8001fea:	230a      	movs	r3, #10
 8001fec:	e010      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8001fee:	2308      	movs	r3, #8
 8001ff0:	e00e      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	e00c      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8001ff6:	2306      	movs	r3, #6
 8001ff8:	e00a      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8001ffa:	2305      	movs	r3, #5
 8001ffc:	e008      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8001ffe:	2304      	movs	r3, #4
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8002002:	2303      	movs	r3, #3
 8002004:	e004      	b.n	8002010 <HAL_GPIO_Init+0x240>
 8002006:	2302      	movs	r3, #2
 8002008:	e002      	b.n	8002010 <HAL_GPIO_Init+0x240>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_GPIO_Init+0x240>
 800200e:	2300      	movs	r3, #0
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	f002 0203 	and.w	r2, r2, #3
 8002016:	0092      	lsls	r2, r2, #2
 8002018:	4093      	lsls	r3, r2
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002020:	4935      	ldr	r1, [pc, #212]	; (80020f8 <HAL_GPIO_Init+0x328>)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202e:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <HAL_GPIO_Init+0x354>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002052:	4a34      	ldr	r2, [pc, #208]	; (8002124 <HAL_GPIO_Init+0x354>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002058:	4b32      	ldr	r3, [pc, #200]	; (8002124 <HAL_GPIO_Init+0x354>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800207c:	4a29      	ldr	r2, [pc, #164]	; (8002124 <HAL_GPIO_Init+0x354>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_GPIO_Init+0x354>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020a6:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <HAL_GPIO_Init+0x354>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_GPIO_Init+0x354>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <HAL_GPIO_Init+0x354>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3301      	adds	r3, #1
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2b0f      	cmp	r3, #15
 80020e0:	f67f ae86 	bls.w	8001df0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40013800 	.word	0x40013800
 80020fc:	40020000 	.word	0x40020000
 8002100:	40020400 	.word	0x40020400
 8002104:	40020800 	.word	0x40020800
 8002108:	40020c00 	.word	0x40020c00
 800210c:	40021000 	.word	0x40021000
 8002110:	40021400 	.word	0x40021400
 8002114:	40021800 	.word	0x40021800
 8002118:	40021c00 	.word	0x40021c00
 800211c:	40022000 	.word	0x40022000
 8002120:	40022400 	.word	0x40022400
 8002124:	40013c00 	.word	0x40013c00

08002128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
 8002134:	4613      	mov	r3, r2
 8002136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002138:	787b      	ldrb	r3, [r7, #1]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002144:	e003      	b.n	800214e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002146:	887b      	ldrh	r3, [r7, #2]
 8002148:	041a      	lsls	r2, r3, #16
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	619a      	str	r2, [r3, #24]
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800215a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215c:	b08f      	sub	sp, #60	; 0x3c
 800215e:	af0a      	add	r7, sp, #40	; 0x28
 8002160:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e116      	b.n	800239a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fb38 	bl	80017fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2203      	movs	r2, #3
 8002190:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f002 f926 	bl	80043fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	687e      	ldr	r6, [r7, #4]
 80021b8:	466d      	mov	r5, sp
 80021ba:	f106 0410 	add.w	r4, r6, #16
 80021be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ce:	1d33      	adds	r3, r6, #4
 80021d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d2:	6838      	ldr	r0, [r7, #0]
 80021d4:	f002 f8ba 	bl	800434c <USB_CoreInit>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2202      	movs	r2, #2
 80021e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0d7      	b.n	800239a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f002 f914 	bl	800441e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	73fb      	strb	r3, [r7, #15]
 80021fa:	e04a      	b.n	8002292 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	333d      	adds	r3, #61	; 0x3d
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	333c      	adds	r3, #60	; 0x3c
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	b298      	uxth	r0, r3
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	3344      	adds	r3, #68	; 0x44
 8002238:	4602      	mov	r2, r0
 800223a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	3340      	adds	r3, #64	; 0x40
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	3348      	adds	r3, #72	; 0x48
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	334c      	adds	r3, #76	; 0x4c
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	3354      	adds	r3, #84	; 0x54
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	3301      	adds	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	d3af      	bcc.n	80021fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e044      	b.n	800232c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	3301      	adds	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d3b5      	bcc.n	80022a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	687e      	ldr	r6, [r7, #4]
 800233e:	466d      	mov	r5, sp
 8002340:	f106 0410 	add.w	r4, r6, #16
 8002344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800234a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800234c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002350:	e885 0003 	stmia.w	r5, {r0, r1}
 8002354:	1d33      	adds	r3, r6, #4
 8002356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002358:	6838      	ldr	r0, [r7, #0]
 800235a:	f002 f8ad 	bl	80044b8 <USB_DevInit>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e014      	b.n	800239a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	2b01      	cmp	r3, #1
 8002386:	d102      	bne.n	800238e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f80b 	bl	80023a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f002 fa6b 	bl	800486e <USB_DevDisconnect>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080023a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	10000003 	.word	0x10000003

080023ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40007000 	.word	0x40007000

0800240c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800243a:	f7ff fbb3 	bl	8001ba4 <HAL_GetTick>
 800243e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002440:	e009      	b.n	8002456 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002442:	f7ff fbaf 	bl	8001ba4 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002450:	d901      	bls.n	8002456 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e022      	b.n	800249c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002462:	d1ee      	bne.n	8002442 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0f      	ldr	r2, [pc, #60]	; (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800246a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002470:	f7ff fb98 	bl	8001ba4 <HAL_GetTick>
 8002474:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002476:	e009      	b.n	800248c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002478:	f7ff fb94 	bl	8001ba4 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002486:	d901      	bls.n	800248c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e007      	b.n	800249c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002498:	d1ee      	bne.n	8002478 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40007000 	.word	0x40007000

080024ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e29b      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 8087 	beq.w	80025de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024d0:	4b96      	ldr	r3, [pc, #600]	; (800272c <HAL_RCC_OscConfig+0x280>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d00c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024dc:	4b93      	ldr	r3, [pc, #588]	; (800272c <HAL_RCC_OscConfig+0x280>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d112      	bne.n	800250e <HAL_RCC_OscConfig+0x62>
 80024e8:	4b90      	ldr	r3, [pc, #576]	; (800272c <HAL_RCC_OscConfig+0x280>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f4:	d10b      	bne.n	800250e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f6:	4b8d      	ldr	r3, [pc, #564]	; (800272c <HAL_RCC_OscConfig+0x280>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d06c      	beq.n	80025dc <HAL_RCC_OscConfig+0x130>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d168      	bne.n	80025dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e275      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x7a>
 8002518:	4b84      	ldr	r3, [pc, #528]	; (800272c <HAL_RCC_OscConfig+0x280>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a83      	ldr	r2, [pc, #524]	; (800272c <HAL_RCC_OscConfig+0x280>)
 800251e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	e02e      	b.n	8002584 <HAL_RCC_OscConfig+0xd8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x9c>
 800252e:	4b7f      	ldr	r3, [pc, #508]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a7e      	ldr	r2, [pc, #504]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b7c      	ldr	r3, [pc, #496]	; (800272c <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7b      	ldr	r2, [pc, #492]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e01d      	b.n	8002584 <HAL_RCC_OscConfig+0xd8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0xc0>
 8002552:	4b76      	ldr	r3, [pc, #472]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a75      	ldr	r2, [pc, #468]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b73      	ldr	r3, [pc, #460]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a72      	ldr	r2, [pc, #456]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0xd8>
 800256c:	4b6f      	ldr	r3, [pc, #444]	; (800272c <HAL_RCC_OscConfig+0x280>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a6e      	ldr	r2, [pc, #440]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b6c      	ldr	r3, [pc, #432]	; (800272c <HAL_RCC_OscConfig+0x280>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6b      	ldr	r2, [pc, #428]	; (800272c <HAL_RCC_OscConfig+0x280>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff fb0a 	bl	8001ba4 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7ff fb06 	bl	8001ba4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e229      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b61      	ldr	r3, [pc, #388]	; (800272c <HAL_RCC_OscConfig+0x280>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0xe8>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff faf6 	bl	8001ba4 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7ff faf2 	bl	8001ba4 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	; 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e215      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ce:	4b57      	ldr	r3, [pc, #348]	; (800272c <HAL_RCC_OscConfig+0x280>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x110>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d069      	beq.n	80026be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ea:	4b50      	ldr	r3, [pc, #320]	; (800272c <HAL_RCC_OscConfig+0x280>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b4d      	ldr	r3, [pc, #308]	; (800272c <HAL_RCC_OscConfig+0x280>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d11c      	bne.n	800263c <HAL_RCC_OscConfig+0x190>
 8002602:	4b4a      	ldr	r3, [pc, #296]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d116      	bne.n	800263c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	4b47      	ldr	r3, [pc, #284]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x17a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e1e9      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002626:	4b41      	ldr	r3, [pc, #260]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	493d      	ldr	r1, [pc, #244]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	e040      	b.n	80026be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d023      	beq.n	800268c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002644:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a38      	ldr	r2, [pc, #224]	; (800272c <HAL_RCC_OscConfig+0x280>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7ff faa8 	bl	8001ba4 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002658:	f7ff faa4 	bl	8001ba4 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e1c7      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	4b30      	ldr	r3, [pc, #192]	; (800272c <HAL_RCC_OscConfig+0x280>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4b2d      	ldr	r3, [pc, #180]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4929      	ldr	r1, [pc, #164]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
 800268a:	e018      	b.n	80026be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_RCC_OscConfig+0x280>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a26      	ldr	r2, [pc, #152]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7ff fa84 	bl	8001ba4 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a0:	f7ff fa80 	bl	8001ba4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e1a3      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <HAL_RCC_OscConfig+0x280>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d038      	beq.n	800273c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d019      	beq.n	8002706 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <HAL_RCC_OscConfig+0x280>)
 80026d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d6:	4a15      	ldr	r2, [pc, #84]	; (800272c <HAL_RCC_OscConfig+0x280>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7ff fa61 	bl	8001ba4 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e6:	f7ff fa5d 	bl	8001ba4 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e180      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_RCC_OscConfig+0x280>)
 80026fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x23a>
 8002704:	e01a      	b.n	800273c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_RCC_OscConfig+0x280>)
 8002708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270a:	4a08      	ldr	r2, [pc, #32]	; (800272c <HAL_RCC_OscConfig+0x280>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7ff fa47 	bl	8001ba4 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271a:	f7ff fa43 	bl	8001ba4 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d903      	bls.n	8002730 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e166      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
 800272c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002730:	4b92      	ldr	r3, [pc, #584]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1ee      	bne.n	800271a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80a4 	beq.w	8002892 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274a:	4b8c      	ldr	r3, [pc, #560]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10d      	bne.n	8002772 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	4b89      	ldr	r3, [pc, #548]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a88      	ldr	r2, [pc, #544]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
 8002762:	4b86      	ldr	r3, [pc, #536]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276e:	2301      	movs	r3, #1
 8002770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002772:	4b83      	ldr	r3, [pc, #524]	; (8002980 <HAL_RCC_OscConfig+0x4d4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d118      	bne.n	80027b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800277e:	4b80      	ldr	r3, [pc, #512]	; (8002980 <HAL_RCC_OscConfig+0x4d4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a7f      	ldr	r2, [pc, #508]	; (8002980 <HAL_RCC_OscConfig+0x4d4>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278a:	f7ff fa0b 	bl	8001ba4 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002792:	f7ff fa07 	bl	8001ba4 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b64      	cmp	r3, #100	; 0x64
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e12a      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a4:	4b76      	ldr	r3, [pc, #472]	; (8002980 <HAL_RCC_OscConfig+0x4d4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x31a>
 80027b8:	4b70      	ldr	r3, [pc, #448]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	4a6f      	ldr	r2, [pc, #444]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	; 0x70
 80027c4:	e02d      	b.n	8002822 <HAL_RCC_OscConfig+0x376>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x33c>
 80027ce:	4b6b      	ldr	r3, [pc, #428]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	4a6a      	ldr	r2, [pc, #424]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	6713      	str	r3, [r2, #112]	; 0x70
 80027da:	4b68      	ldr	r3, [pc, #416]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	4a67      	ldr	r2, [pc, #412]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027e0:	f023 0304 	bic.w	r3, r3, #4
 80027e4:	6713      	str	r3, [r2, #112]	; 0x70
 80027e6:	e01c      	b.n	8002822 <HAL_RCC_OscConfig+0x376>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d10c      	bne.n	800280a <HAL_RCC_OscConfig+0x35e>
 80027f0:	4b62      	ldr	r3, [pc, #392]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f4:	4a61      	ldr	r2, [pc, #388]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	6713      	str	r3, [r2, #112]	; 0x70
 80027fc:	4b5f      	ldr	r3, [pc, #380]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	4a5e      	ldr	r2, [pc, #376]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6713      	str	r3, [r2, #112]	; 0x70
 8002808:	e00b      	b.n	8002822 <HAL_RCC_OscConfig+0x376>
 800280a:	4b5c      	ldr	r3, [pc, #368]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	4a5b      	ldr	r2, [pc, #364]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	6713      	str	r3, [r2, #112]	; 0x70
 8002816:	4b59      	ldr	r3, [pc, #356]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	4a58      	ldr	r2, [pc, #352]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 800281c:	f023 0304 	bic.w	r3, r3, #4
 8002820:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d015      	beq.n	8002856 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7ff f9bb 	bl	8001ba4 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7ff f9b7 	bl	8001ba4 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0d8      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002848:	4b4c      	ldr	r3, [pc, #304]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ee      	beq.n	8002832 <HAL_RCC_OscConfig+0x386>
 8002854:	e014      	b.n	8002880 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002856:	f7ff f9a5 	bl	8001ba4 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7ff f9a1 	bl	8001ba4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	; 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0c2      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002874:	4b41      	ldr	r3, [pc, #260]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ee      	bne.n	800285e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002880:	7dfb      	ldrb	r3, [r7, #23]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d105      	bne.n	8002892 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002886:	4b3d      	ldr	r3, [pc, #244]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a3c      	ldr	r2, [pc, #240]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 800288c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80ae 	beq.w	80029f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800289c:	4b37      	ldr	r3, [pc, #220]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d06d      	beq.n	8002984 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d14b      	bne.n	8002948 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b0:	4b32      	ldr	r3, [pc, #200]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a31      	ldr	r2, [pc, #196]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 80028b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7ff f972 	bl	8001ba4 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff f96e 	bl	8001ba4 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e091      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	4b29      	ldr	r3, [pc, #164]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69da      	ldr	r2, [r3, #28]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	019b      	lsls	r3, r3, #6
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	085b      	lsrs	r3, r3, #1
 80028fa:	3b01      	subs	r3, #1
 80028fc:	041b      	lsls	r3, r3, #16
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	061b      	lsls	r3, r3, #24
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	071b      	lsls	r3, r3, #28
 800290e:	491b      	ldr	r1, [pc, #108]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a18      	ldr	r2, [pc, #96]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 800291a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7ff f940 	bl	8001ba4 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7ff f93c 	bl	8001ba4 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e05f      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x47c>
 8002946:	e057      	b.n	80029f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0b      	ldr	r2, [pc, #44]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 800294e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7ff f926 	bl	8001ba4 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295c:	f7ff f922 	bl	8001ba4 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e045      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x4b0>
 800297a:	e03d      	b.n	80029f8 <HAL_RCC_OscConfig+0x54c>
 800297c:	40023800 	.word	0x40023800
 8002980:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002984:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <HAL_RCC_OscConfig+0x558>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d030      	beq.n	80029f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d129      	bne.n	80029f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d122      	bne.n	80029f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029b4:	4013      	ands	r3, r2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029bc:	4293      	cmp	r3, r2
 80029be:	d119      	bne.n	80029f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	3b01      	subs	r3, #1
 80029ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d10f      	bne.n	80029f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d107      	bne.n	80029f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800

08002a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0d0      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a20:	4b6a      	ldr	r3, [pc, #424]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d910      	bls.n	8002a50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b67      	ldr	r3, [pc, #412]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 020f 	bic.w	r2, r3, #15
 8002a36:	4965      	ldr	r1, [pc, #404]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b63      	ldr	r3, [pc, #396]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0b8      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d020      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a68:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a58      	ldr	r2, [pc, #352]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a80:	4b53      	ldr	r3, [pc, #332]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4a52      	ldr	r2, [pc, #328]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8c:	4b50      	ldr	r3, [pc, #320]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	494d      	ldr	r1, [pc, #308]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d040      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d115      	bne.n	8002aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e07f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e073      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	4b3d      	ldr	r3, [pc, #244]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e06b      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aea:	4b39      	ldr	r3, [pc, #228]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f023 0203 	bic.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4936      	ldr	r1, [pc, #216]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afc:	f7ff f852 	bl	8001ba4 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b04:	f7ff f84e 	bl	8001ba4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e053      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 020c 	and.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1eb      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b27      	ldr	r3, [pc, #156]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d210      	bcs.n	8002b5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 020f 	bic.w	r2, r3, #15
 8002b42:	4922      	ldr	r1, [pc, #136]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e032      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b68:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4916      	ldr	r1, [pc, #88]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	490e      	ldr	r1, [pc, #56]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b9a:	f000 f821 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	490a      	ldr	r1, [pc, #40]	; (8002bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8002bac:	5ccb      	ldrb	r3, [r1, r3]
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <HAL_RCC_ClockConfig+0x1d4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe ffae 	bl	8001b1c <HAL_InitTick>

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023c00 	.word	0x40023c00
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	08005bdc 	.word	0x08005bdc
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	20000004 	.word	0x20000004

08002be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be4:	b094      	sub	sp, #80	; 0x50
 8002be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	647b      	str	r3, [r7, #68]	; 0x44
 8002bec:	2300      	movs	r3, #0
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf8:	4b79      	ldr	r3, [pc, #484]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d00d      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0x40>
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	f200 80e1 	bhi.w	8002dcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x34>
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d003      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c12:	e0db      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c14:	4b73      	ldr	r3, [pc, #460]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c18:	e0db      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c1a:	4b73      	ldr	r3, [pc, #460]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c1e:	e0d8      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c20:	4b6f      	ldr	r3, [pc, #444]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c28:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c2a:	4b6d      	ldr	r3, [pc, #436]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d063      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c36:	4b6a      	ldr	r3, [pc, #424]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	099b      	lsrs	r3, r3, #6
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c48:	633b      	str	r3, [r7, #48]	; 0x30
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c52:	4622      	mov	r2, r4
 8002c54:	462b      	mov	r3, r5
 8002c56:	f04f 0000 	mov.w	r0, #0
 8002c5a:	f04f 0100 	mov.w	r1, #0
 8002c5e:	0159      	lsls	r1, r3, #5
 8002c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c64:	0150      	lsls	r0, r2, #5
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	1a51      	subs	r1, r2, r1
 8002c6e:	6139      	str	r1, [r7, #16]
 8002c70:	4629      	mov	r1, r5
 8002c72:	eb63 0301 	sbc.w	r3, r3, r1
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c84:	4659      	mov	r1, fp
 8002c86:	018b      	lsls	r3, r1, #6
 8002c88:	4651      	mov	r1, sl
 8002c8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c8e:	4651      	mov	r1, sl
 8002c90:	018a      	lsls	r2, r1, #6
 8002c92:	4651      	mov	r1, sl
 8002c94:	ebb2 0801 	subs.w	r8, r2, r1
 8002c98:	4659      	mov	r1, fp
 8002c9a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cb2:	4690      	mov	r8, r2
 8002cb4:	4699      	mov	r9, r3
 8002cb6:	4623      	mov	r3, r4
 8002cb8:	eb18 0303 	adds.w	r3, r8, r3
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	462b      	mov	r3, r5
 8002cc0:	eb49 0303 	adc.w	r3, r9, r3
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	024b      	lsls	r3, r1, #9
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cdc:	4621      	mov	r1, r4
 8002cde:	024a      	lsls	r2, r1, #9
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cf0:	f7fd faf6 	bl	80002e0 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cfc:	e058      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfe:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	099b      	lsrs	r3, r3, #6
 8002d04:	2200      	movs	r2, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	4611      	mov	r1, r2
 8002d0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d0e:	623b      	str	r3, [r7, #32]
 8002d10:	2300      	movs	r3, #0
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
 8002d14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d18:	4642      	mov	r2, r8
 8002d1a:	464b      	mov	r3, r9
 8002d1c:	f04f 0000 	mov.w	r0, #0
 8002d20:	f04f 0100 	mov.w	r1, #0
 8002d24:	0159      	lsls	r1, r3, #5
 8002d26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d2a:	0150      	lsls	r0, r2, #5
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4641      	mov	r1, r8
 8002d32:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d36:	4649      	mov	r1, r9
 8002d38:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d50:	ebb2 040a 	subs.w	r4, r2, sl
 8002d54:	eb63 050b 	sbc.w	r5, r3, fp
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	00eb      	lsls	r3, r5, #3
 8002d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d66:	00e2      	lsls	r2, r4, #3
 8002d68:	4614      	mov	r4, r2
 8002d6a:	461d      	mov	r5, r3
 8002d6c:	4643      	mov	r3, r8
 8002d6e:	18e3      	adds	r3, r4, r3
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	464b      	mov	r3, r9
 8002d74:	eb45 0303 	adc.w	r3, r5, r3
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d86:	4629      	mov	r1, r5
 8002d88:	028b      	lsls	r3, r1, #10
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d90:	4621      	mov	r1, r4
 8002d92:	028a      	lsls	r2, r1, #10
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	61fa      	str	r2, [r7, #28]
 8002da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da4:	f7fd fa9c 	bl	80002e0 <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4613      	mov	r3, r2
 8002dae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002dc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dca:	e002      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3750      	adds	r7, #80	; 0x50
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	00f42400 	.word	0x00f42400
 8002de8:	007a1200 	.word	0x007a1200

08002dec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000000 	.word	0x20000000

08002e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e08:	f7ff fff0 	bl	8002dec <HAL_RCC_GetHCLKFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	0a9b      	lsrs	r3, r3, #10
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4903      	ldr	r1, [pc, #12]	; (8002e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800
 8002e28:	08005bec 	.word	0x08005bec

08002e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e30:	f7ff ffdc 	bl	8002dec <HAL_RCC_GetHCLKFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0b5b      	lsrs	r3, r3, #13
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4903      	ldr	r1, [pc, #12]	; (8002e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	08005bec 	.word	0x08005bec

08002e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d012      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e7c:	4b69      	ldr	r3, [pc, #420]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a68      	ldr	r2, [pc, #416]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e86:	6093      	str	r3, [r2, #8]
 8002e88:	4b66      	ldr	r3, [pc, #408]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e90:	4964      	ldr	r1, [pc, #400]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d017      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eae:	4b5d      	ldr	r3, [pc, #372]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebc:	4959      	ldr	r1, [pc, #356]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d017      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eea:	4b4e      	ldr	r3, [pc, #312]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	494a      	ldr	r1, [pc, #296]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f08:	d101      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f16:	2301      	movs	r3, #1
 8002f18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f26:	2301      	movs	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 808b 	beq.w	800304e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f38:	4b3a      	ldr	r3, [pc, #232]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	4a39      	ldr	r2, [pc, #228]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f42:	6413      	str	r3, [r2, #64]	; 0x40
 8002f44:	4b37      	ldr	r3, [pc, #220]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f50:	4b35      	ldr	r3, [pc, #212]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a34      	ldr	r2, [pc, #208]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5c:	f7fe fe22 	bl	8001ba4 <HAL_GetTick>
 8002f60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f64:	f7fe fe1e 	bl	8001ba4 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e38f      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f76:	4b2c      	ldr	r3, [pc, #176]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f82:	4b28      	ldr	r3, [pc, #160]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d035      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d02e      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fa0:	4b20      	ldr	r3, [pc, #128]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002faa:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a1d      	ldr	r2, [pc, #116]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a1a      	ldr	r2, [pc, #104]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fc2:	4a18      	ldr	r2, [pc, #96]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fc8:	4b16      	ldr	r3, [pc, #88]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d114      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fde6 	bl	8001ba4 <HAL_GetTick>
 8002fd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fde2 	bl	8001ba4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e351      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0ee      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800300a:	d111      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800301a:	400b      	ands	r3, r1
 800301c:	4901      	ldr	r1, [pc, #4]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
 8003022:	e00b      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003024:	40023800 	.word	0x40023800
 8003028:	40007000 	.word	0x40007000
 800302c:	0ffffcff 	.word	0x0ffffcff
 8003030:	4bac      	ldr	r3, [pc, #688]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4aab      	ldr	r2, [pc, #684]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003036:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800303a:	6093      	str	r3, [r2, #8]
 800303c:	4ba9      	ldr	r3, [pc, #676]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003048:	49a6      	ldr	r1, [pc, #664]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304a:	4313      	orrs	r3, r2
 800304c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b00      	cmp	r3, #0
 8003058:	d010      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800305a:	4ba2      	ldr	r3, [pc, #648]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003060:	4aa0      	ldr	r2, [pc, #640]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003066:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800306a:	4b9e      	ldr	r3, [pc, #632]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	499b      	ldr	r1, [pc, #620]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003088:	4b96      	ldr	r3, [pc, #600]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003096:	4993      	ldr	r1, [pc, #588]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030aa:	4b8e      	ldr	r3, [pc, #568]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030b8:	498a      	ldr	r1, [pc, #552]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030cc:	4b85      	ldr	r3, [pc, #532]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030da:	4982      	ldr	r1, [pc, #520]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030ee:	4b7d      	ldr	r3, [pc, #500]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4979      	ldr	r1, [pc, #484]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003110:	4b74      	ldr	r3, [pc, #464]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	f023 0203 	bic.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	4971      	ldr	r1, [pc, #452]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003132:	4b6c      	ldr	r3, [pc, #432]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003138:	f023 020c 	bic.w	r2, r3, #12
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003140:	4968      	ldr	r1, [pc, #416]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003154:	4b63      	ldr	r3, [pc, #396]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	4960      	ldr	r1, [pc, #384]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003176:	4b5b      	ldr	r3, [pc, #364]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003184:	4957      	ldr	r1, [pc, #348]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003198:	4b52      	ldr	r3, [pc, #328]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	494f      	ldr	r1, [pc, #316]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031ba:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	4946      	ldr	r1, [pc, #280]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031dc:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	493e      	ldr	r1, [pc, #248]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031fe:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320c:	4935      	ldr	r1, [pc, #212]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003220:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800322e:	492d      	ldr	r1, [pc, #180]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d011      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003242:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003250:	4924      	ldr	r1, [pc, #144]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800325c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003260:	d101      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003272:	2301      	movs	r3, #1
 8003274:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003282:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003288:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003290:	4914      	ldr	r1, [pc, #80]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00b      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b4:	490b      	ldr	r1, [pc, #44]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00f      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d8:	4902      	ldr	r1, [pc, #8]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032e0:	e002      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00b      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032f4:	4b8a      	ldr	r3, [pc, #552]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	4986      	ldr	r1, [pc, #536]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003318:	4b81      	ldr	r3, [pc, #516]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800331e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003328:	497d      	ldr	r1, [pc, #500]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d006      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80d6 	beq.w	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003344:	4b76      	ldr	r3, [pc, #472]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a75      	ldr	r2, [pc, #468]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800334a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800334e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003350:	f7fe fc28 	bl	8001ba4 <HAL_GetTick>
 8003354:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003358:	f7fe fc24 	bl	8001ba4 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e195      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800336a:	4b6d      	ldr	r3, [pc, #436]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d021      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003386:	2b00      	cmp	r3, #0
 8003388:	d11d      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800338a:	4b65      	ldr	r3, [pc, #404]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003398:	4b61      	ldr	r3, [pc, #388]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800339e:	0e1b      	lsrs	r3, r3, #24
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	019a      	lsls	r2, r3, #6
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	071b      	lsls	r3, r3, #28
 80033be:	4958      	ldr	r1, [pc, #352]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02e      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f0:	d129      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033f2:	4b4b      	ldr	r3, [pc, #300]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003400:	4b47      	ldr	r3, [pc, #284]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003406:	0f1b      	lsrs	r3, r3, #28
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	019a      	lsls	r2, r3, #6
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	041b      	lsls	r3, r3, #16
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	061b      	lsls	r3, r3, #24
 8003420:	431a      	orrs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	071b      	lsls	r3, r3, #28
 8003426:	493e      	ldr	r1, [pc, #248]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800342e:	4b3c      	ldr	r3, [pc, #240]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003434:	f023 021f 	bic.w	r2, r3, #31
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	3b01      	subs	r3, #1
 800343e:	4938      	ldr	r1, [pc, #224]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01d      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003452:	4b33      	ldr	r3, [pc, #204]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003458:	0e1b      	lsrs	r3, r3, #24
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003460:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003466:	0f1b      	lsrs	r3, r3, #28
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	019a      	lsls	r2, r3, #6
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	431a      	orrs	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	061b      	lsls	r3, r3, #24
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	071b      	lsls	r3, r3, #28
 8003486:	4926      	ldr	r1, [pc, #152]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d011      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	019a      	lsls	r2, r3, #6
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	041b      	lsls	r3, r3, #16
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	071b      	lsls	r3, r3, #28
 80034b6:	491a      	ldr	r1, [pc, #104]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034be:	4b18      	ldr	r3, [pc, #96]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a17      	ldr	r2, [pc, #92]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ca:	f7fe fb6b 	bl	8001ba4 <HAL_GetTick>
 80034ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034d2:	f7fe fb67 	bl	8001ba4 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b64      	cmp	r3, #100	; 0x64
 80034de:	d901      	bls.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0d8      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034e4:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	f040 80ce 	bne.w	8003694 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a08      	ldr	r2, [pc, #32]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003504:	f7fe fb4e 	bl	8001ba4 <HAL_GetTick>
 8003508:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800350a:	e00b      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800350c:	f7fe fb4a 	bl	8001ba4 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d904      	bls.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e0bb      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003524:	4b5e      	ldr	r3, [pc, #376]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800352c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003530:	d0ec      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800354e:	2b00      	cmp	r3, #0
 8003550:	d02e      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d12a      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800355a:	4b51      	ldr	r3, [pc, #324]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003568:	4b4d      	ldr	r3, [pc, #308]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	0f1b      	lsrs	r3, r3, #28
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	019a      	lsls	r2, r3, #6
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	041b      	lsls	r3, r3, #16
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	061b      	lsls	r3, r3, #24
 8003588:	431a      	orrs	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	071b      	lsls	r3, r3, #28
 800358e:	4944      	ldr	r1, [pc, #272]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003596:	4b42      	ldr	r3, [pc, #264]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800359c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	493d      	ldr	r1, [pc, #244]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d022      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035c4:	d11d      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035c6:	4b36      	ldr	r3, [pc, #216]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	0e1b      	lsrs	r3, r3, #24
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035d4:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	0f1b      	lsrs	r3, r3, #28
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	019a      	lsls	r2, r3, #6
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	041b      	lsls	r3, r3, #16
 80035ee:	431a      	orrs	r2, r3
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	061b      	lsls	r3, r3, #24
 80035f4:	431a      	orrs	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	071b      	lsls	r3, r3, #28
 80035fa:	4929      	ldr	r1, [pc, #164]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d028      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800360e:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003614:	0e1b      	lsrs	r3, r3, #24
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800361c:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	0c1b      	lsrs	r3, r3, #16
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	019a      	lsls	r2, r3, #6
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	041b      	lsls	r3, r3, #16
 8003634:	431a      	orrs	r2, r3
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	061b      	lsls	r3, r3, #24
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	071b      	lsls	r3, r3, #28
 8003642:	4917      	ldr	r1, [pc, #92]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800364a:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	4911      	ldr	r1, [pc, #68]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0e      	ldr	r2, [pc, #56]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366c:	f7fe fa9a 	bl	8001ba4 <HAL_GetTick>
 8003670:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003674:	f7fe fa96 	bl	8001ba4 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e007      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800368e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003692:	d1ef      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800

080036a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e049      	b.n	800374a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fe f816 	bl	80016fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	4619      	mov	r1, r3
 80036e2:	4610      	mov	r0, r2
 80036e4:	f000 f8a6 	bl	8003834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d001      	beq.n	800376c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e04c      	b.n	8003806 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a26      	ldr	r2, [pc, #152]	; (8003814 <HAL_TIM_Base_Start+0xc0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d022      	beq.n	80037c4 <HAL_TIM_Base_Start+0x70>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003786:	d01d      	beq.n	80037c4 <HAL_TIM_Base_Start+0x70>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a22      	ldr	r2, [pc, #136]	; (8003818 <HAL_TIM_Base_Start+0xc4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d018      	beq.n	80037c4 <HAL_TIM_Base_Start+0x70>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a21      	ldr	r2, [pc, #132]	; (800381c <HAL_TIM_Base_Start+0xc8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <HAL_TIM_Base_Start+0x70>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1f      	ldr	r2, [pc, #124]	; (8003820 <HAL_TIM_Base_Start+0xcc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <HAL_TIM_Base_Start+0x70>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <HAL_TIM_Base_Start+0xd0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_TIM_Base_Start+0x70>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <HAL_TIM_Base_Start+0xd4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_TIM_Base_Start+0x70>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1b      	ldr	r2, [pc, #108]	; (800382c <HAL_TIM_Base_Start+0xd8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d115      	bne.n	80037f0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	4b19      	ldr	r3, [pc, #100]	; (8003830 <HAL_TIM_Base_Start+0xdc>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d015      	beq.n	8003802 <HAL_TIM_Base_Start+0xae>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037dc:	d011      	beq.n	8003802 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ee:	e008      	b.n	8003802 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	e000      	b.n	8003804 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003802:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40010000 	.word	0x40010000
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800
 8003820:	40000c00 	.word	0x40000c00
 8003824:	40010400 	.word	0x40010400
 8003828:	40014000 	.word	0x40014000
 800382c:	40001800 	.word	0x40001800
 8003830:	00010007 	.word	0x00010007

08003834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a40      	ldr	r2, [pc, #256]	; (8003948 <TIM_Base_SetConfig+0x114>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003852:	d00f      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a3d      	ldr	r2, [pc, #244]	; (800394c <TIM_Base_SetConfig+0x118>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00b      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a3c      	ldr	r2, [pc, #240]	; (8003950 <TIM_Base_SetConfig+0x11c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d007      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3b      	ldr	r2, [pc, #236]	; (8003954 <TIM_Base_SetConfig+0x120>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d003      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a3a      	ldr	r2, [pc, #232]	; (8003958 <TIM_Base_SetConfig+0x124>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d108      	bne.n	8003886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a2f      	ldr	r2, [pc, #188]	; (8003948 <TIM_Base_SetConfig+0x114>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d02b      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003894:	d027      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2c      	ldr	r2, [pc, #176]	; (800394c <TIM_Base_SetConfig+0x118>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d023      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a2b      	ldr	r2, [pc, #172]	; (8003950 <TIM_Base_SetConfig+0x11c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01f      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2a      	ldr	r2, [pc, #168]	; (8003954 <TIM_Base_SetConfig+0x120>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01b      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a29      	ldr	r2, [pc, #164]	; (8003958 <TIM_Base_SetConfig+0x124>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d017      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a28      	ldr	r2, [pc, #160]	; (800395c <TIM_Base_SetConfig+0x128>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a27      	ldr	r2, [pc, #156]	; (8003960 <TIM_Base_SetConfig+0x12c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00f      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a26      	ldr	r2, [pc, #152]	; (8003964 <TIM_Base_SetConfig+0x130>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00b      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a25      	ldr	r2, [pc, #148]	; (8003968 <TIM_Base_SetConfig+0x134>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d007      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a24      	ldr	r2, [pc, #144]	; (800396c <TIM_Base_SetConfig+0x138>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d003      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a23      	ldr	r2, [pc, #140]	; (8003970 <TIM_Base_SetConfig+0x13c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d108      	bne.n	80038f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <TIM_Base_SetConfig+0x114>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d003      	beq.n	800392c <TIM_Base_SetConfig+0xf8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a0c      	ldr	r2, [pc, #48]	; (8003958 <TIM_Base_SetConfig+0x124>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d103      	bne.n	8003934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	615a      	str	r2, [r3, #20]
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40010000 	.word	0x40010000
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800
 8003954:	40000c00 	.word	0x40000c00
 8003958:	40010400 	.word	0x40010400
 800395c:	40014000 	.word	0x40014000
 8003960:	40014400 	.word	0x40014400
 8003964:	40014800 	.word	0x40014800
 8003968:	40001800 	.word	0x40001800
 800396c:	40001c00 	.word	0x40001c00
 8003970:	40002000 	.word	0x40002000

08003974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e040      	b.n	8003a08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fd fed0 	bl	800173c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2224      	movs	r2, #36	; 0x24
 80039a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8b0 	bl	8003b18 <UART_SetConfig>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e022      	b.n	8003a08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fb08 	bl	8003fe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fb8f 	bl	8004124 <UART_CheckIdleState>
 8003a06:	4603      	mov	r3, r0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	; 0x28
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d171      	bne.n	8003b0c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_UART_Transmit+0x24>
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e06a      	b.n	8003b0e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2221      	movs	r2, #33	; 0x21
 8003a44:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a46:	f7fe f8ad 	bl	8001ba4 <HAL_GetTick>
 8003a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	88fa      	ldrh	r2, [r7, #6]
 8003a50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	88fa      	ldrh	r2, [r7, #6]
 8003a58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a64:	d108      	bne.n	8003a78 <HAL_UART_Transmit+0x68>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e003      	b.n	8003a80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a80:	e02c      	b.n	8003adc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2180      	movs	r1, #128	; 0x80
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 fb96 	bl	80041be <UART_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e038      	b.n	8003b0e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	e007      	b.n	8003aca <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1cc      	bne.n	8003a82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2200      	movs	r2, #0
 8003af0:	2140      	movs	r1, #64	; 0x40
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fb63 	bl	80041be <UART_WaitOnFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e005      	b.n	8003b0e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4ba6      	ldr	r3, [pc, #664]	; (8003ddc <UART_SetConfig+0x2c4>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	6979      	ldr	r1, [r7, #20]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a94      	ldr	r2, [pc, #592]	; (8003de0 <UART_SetConfig+0x2c8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d120      	bne.n	8003bd6 <UART_SetConfig+0xbe>
 8003b94:	4b93      	ldr	r3, [pc, #588]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d816      	bhi.n	8003bd0 <UART_SetConfig+0xb8>
 8003ba2:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <UART_SetConfig+0x90>)
 8003ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba8:	08003bb9 	.word	0x08003bb9
 8003bac:	08003bc5 	.word	0x08003bc5
 8003bb0:	08003bbf 	.word	0x08003bbf
 8003bb4:	08003bcb 	.word	0x08003bcb
 8003bb8:	2301      	movs	r3, #1
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e150      	b.n	8003e60 <UART_SetConfig+0x348>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e14d      	b.n	8003e60 <UART_SetConfig+0x348>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e14a      	b.n	8003e60 <UART_SetConfig+0x348>
 8003bca:	2308      	movs	r3, #8
 8003bcc:	77fb      	strb	r3, [r7, #31]
 8003bce:	e147      	b.n	8003e60 <UART_SetConfig+0x348>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e144      	b.n	8003e60 <UART_SetConfig+0x348>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a83      	ldr	r2, [pc, #524]	; (8003de8 <UART_SetConfig+0x2d0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d132      	bne.n	8003c46 <UART_SetConfig+0x12e>
 8003be0:	4b80      	ldr	r3, [pc, #512]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	d828      	bhi.n	8003c40 <UART_SetConfig+0x128>
 8003bee:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <UART_SetConfig+0xdc>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c29 	.word	0x08003c29
 8003bf8:	08003c41 	.word	0x08003c41
 8003bfc:	08003c41 	.word	0x08003c41
 8003c00:	08003c41 	.word	0x08003c41
 8003c04:	08003c35 	.word	0x08003c35
 8003c08:	08003c41 	.word	0x08003c41
 8003c0c:	08003c41 	.word	0x08003c41
 8003c10:	08003c41 	.word	0x08003c41
 8003c14:	08003c2f 	.word	0x08003c2f
 8003c18:	08003c41 	.word	0x08003c41
 8003c1c:	08003c41 	.word	0x08003c41
 8003c20:	08003c41 	.word	0x08003c41
 8003c24:	08003c3b 	.word	0x08003c3b
 8003c28:	2300      	movs	r3, #0
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e118      	b.n	8003e60 <UART_SetConfig+0x348>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e115      	b.n	8003e60 <UART_SetConfig+0x348>
 8003c34:	2304      	movs	r3, #4
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e112      	b.n	8003e60 <UART_SetConfig+0x348>
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e10f      	b.n	8003e60 <UART_SetConfig+0x348>
 8003c40:	2310      	movs	r3, #16
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e10c      	b.n	8003e60 <UART_SetConfig+0x348>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a68      	ldr	r2, [pc, #416]	; (8003dec <UART_SetConfig+0x2d4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d120      	bne.n	8003c92 <UART_SetConfig+0x17a>
 8003c50:	4b64      	ldr	r3, [pc, #400]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c5a:	2b30      	cmp	r3, #48	; 0x30
 8003c5c:	d013      	beq.n	8003c86 <UART_SetConfig+0x16e>
 8003c5e:	2b30      	cmp	r3, #48	; 0x30
 8003c60:	d814      	bhi.n	8003c8c <UART_SetConfig+0x174>
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d009      	beq.n	8003c7a <UART_SetConfig+0x162>
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d810      	bhi.n	8003c8c <UART_SetConfig+0x174>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <UART_SetConfig+0x15c>
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d006      	beq.n	8003c80 <UART_SetConfig+0x168>
 8003c72:	e00b      	b.n	8003c8c <UART_SetConfig+0x174>
 8003c74:	2300      	movs	r3, #0
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e0f2      	b.n	8003e60 <UART_SetConfig+0x348>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	77fb      	strb	r3, [r7, #31]
 8003c7e:	e0ef      	b.n	8003e60 <UART_SetConfig+0x348>
 8003c80:	2304      	movs	r3, #4
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e0ec      	b.n	8003e60 <UART_SetConfig+0x348>
 8003c86:	2308      	movs	r3, #8
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e0e9      	b.n	8003e60 <UART_SetConfig+0x348>
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e0e6      	b.n	8003e60 <UART_SetConfig+0x348>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a56      	ldr	r2, [pc, #344]	; (8003df0 <UART_SetConfig+0x2d8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d120      	bne.n	8003cde <UART_SetConfig+0x1c6>
 8003c9c:	4b51      	ldr	r3, [pc, #324]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ca6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ca8:	d013      	beq.n	8003cd2 <UART_SetConfig+0x1ba>
 8003caa:	2bc0      	cmp	r3, #192	; 0xc0
 8003cac:	d814      	bhi.n	8003cd8 <UART_SetConfig+0x1c0>
 8003cae:	2b80      	cmp	r3, #128	; 0x80
 8003cb0:	d009      	beq.n	8003cc6 <UART_SetConfig+0x1ae>
 8003cb2:	2b80      	cmp	r3, #128	; 0x80
 8003cb4:	d810      	bhi.n	8003cd8 <UART_SetConfig+0x1c0>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <UART_SetConfig+0x1a8>
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d006      	beq.n	8003ccc <UART_SetConfig+0x1b4>
 8003cbe:	e00b      	b.n	8003cd8 <UART_SetConfig+0x1c0>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e0cc      	b.n	8003e60 <UART_SetConfig+0x348>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e0c9      	b.n	8003e60 <UART_SetConfig+0x348>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e0c6      	b.n	8003e60 <UART_SetConfig+0x348>
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e0c3      	b.n	8003e60 <UART_SetConfig+0x348>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e0c0      	b.n	8003e60 <UART_SetConfig+0x348>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a44      	ldr	r2, [pc, #272]	; (8003df4 <UART_SetConfig+0x2dc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d125      	bne.n	8003d34 <UART_SetConfig+0x21c>
 8003ce8:	4b3e      	ldr	r3, [pc, #248]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf6:	d017      	beq.n	8003d28 <UART_SetConfig+0x210>
 8003cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cfc:	d817      	bhi.n	8003d2e <UART_SetConfig+0x216>
 8003cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d02:	d00b      	beq.n	8003d1c <UART_SetConfig+0x204>
 8003d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d08:	d811      	bhi.n	8003d2e <UART_SetConfig+0x216>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <UART_SetConfig+0x1fe>
 8003d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d12:	d006      	beq.n	8003d22 <UART_SetConfig+0x20a>
 8003d14:	e00b      	b.n	8003d2e <UART_SetConfig+0x216>
 8003d16:	2300      	movs	r3, #0
 8003d18:	77fb      	strb	r3, [r7, #31]
 8003d1a:	e0a1      	b.n	8003e60 <UART_SetConfig+0x348>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	e09e      	b.n	8003e60 <UART_SetConfig+0x348>
 8003d22:	2304      	movs	r3, #4
 8003d24:	77fb      	strb	r3, [r7, #31]
 8003d26:	e09b      	b.n	8003e60 <UART_SetConfig+0x348>
 8003d28:	2308      	movs	r3, #8
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e098      	b.n	8003e60 <UART_SetConfig+0x348>
 8003d2e:	2310      	movs	r3, #16
 8003d30:	77fb      	strb	r3, [r7, #31]
 8003d32:	e095      	b.n	8003e60 <UART_SetConfig+0x348>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a2f      	ldr	r2, [pc, #188]	; (8003df8 <UART_SetConfig+0x2e0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d125      	bne.n	8003d8a <UART_SetConfig+0x272>
 8003d3e:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d4c:	d017      	beq.n	8003d7e <UART_SetConfig+0x266>
 8003d4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d52:	d817      	bhi.n	8003d84 <UART_SetConfig+0x26c>
 8003d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d58:	d00b      	beq.n	8003d72 <UART_SetConfig+0x25a>
 8003d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5e:	d811      	bhi.n	8003d84 <UART_SetConfig+0x26c>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <UART_SetConfig+0x254>
 8003d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d68:	d006      	beq.n	8003d78 <UART_SetConfig+0x260>
 8003d6a:	e00b      	b.n	8003d84 <UART_SetConfig+0x26c>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	77fb      	strb	r3, [r7, #31]
 8003d70:	e076      	b.n	8003e60 <UART_SetConfig+0x348>
 8003d72:	2302      	movs	r3, #2
 8003d74:	77fb      	strb	r3, [r7, #31]
 8003d76:	e073      	b.n	8003e60 <UART_SetConfig+0x348>
 8003d78:	2304      	movs	r3, #4
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	e070      	b.n	8003e60 <UART_SetConfig+0x348>
 8003d7e:	2308      	movs	r3, #8
 8003d80:	77fb      	strb	r3, [r7, #31]
 8003d82:	e06d      	b.n	8003e60 <UART_SetConfig+0x348>
 8003d84:	2310      	movs	r3, #16
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	e06a      	b.n	8003e60 <UART_SetConfig+0x348>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <UART_SetConfig+0x2e4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d138      	bne.n	8003e06 <UART_SetConfig+0x2ee>
 8003d94:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003da2:	d017      	beq.n	8003dd4 <UART_SetConfig+0x2bc>
 8003da4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003da8:	d82a      	bhi.n	8003e00 <UART_SetConfig+0x2e8>
 8003daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dae:	d00b      	beq.n	8003dc8 <UART_SetConfig+0x2b0>
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db4:	d824      	bhi.n	8003e00 <UART_SetConfig+0x2e8>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <UART_SetConfig+0x2aa>
 8003dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbe:	d006      	beq.n	8003dce <UART_SetConfig+0x2b6>
 8003dc0:	e01e      	b.n	8003e00 <UART_SetConfig+0x2e8>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e04b      	b.n	8003e60 <UART_SetConfig+0x348>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e048      	b.n	8003e60 <UART_SetConfig+0x348>
 8003dce:	2304      	movs	r3, #4
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e045      	b.n	8003e60 <UART_SetConfig+0x348>
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e042      	b.n	8003e60 <UART_SetConfig+0x348>
 8003dda:	bf00      	nop
 8003ddc:	efff69f3 	.word	0xefff69f3
 8003de0:	40011000 	.word	0x40011000
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40004400 	.word	0x40004400
 8003dec:	40004800 	.word	0x40004800
 8003df0:	40004c00 	.word	0x40004c00
 8003df4:	40005000 	.word	0x40005000
 8003df8:	40011400 	.word	0x40011400
 8003dfc:	40007800 	.word	0x40007800
 8003e00:	2310      	movs	r3, #16
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e02c      	b.n	8003e60 <UART_SetConfig+0x348>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a72      	ldr	r2, [pc, #456]	; (8003fd4 <UART_SetConfig+0x4bc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d125      	bne.n	8003e5c <UART_SetConfig+0x344>
 8003e10:	4b71      	ldr	r3, [pc, #452]	; (8003fd8 <UART_SetConfig+0x4c0>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e1e:	d017      	beq.n	8003e50 <UART_SetConfig+0x338>
 8003e20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e24:	d817      	bhi.n	8003e56 <UART_SetConfig+0x33e>
 8003e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e2a:	d00b      	beq.n	8003e44 <UART_SetConfig+0x32c>
 8003e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e30:	d811      	bhi.n	8003e56 <UART_SetConfig+0x33e>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <UART_SetConfig+0x326>
 8003e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e3a:	d006      	beq.n	8003e4a <UART_SetConfig+0x332>
 8003e3c:	e00b      	b.n	8003e56 <UART_SetConfig+0x33e>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	77fb      	strb	r3, [r7, #31]
 8003e42:	e00d      	b.n	8003e60 <UART_SetConfig+0x348>
 8003e44:	2302      	movs	r3, #2
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e00a      	b.n	8003e60 <UART_SetConfig+0x348>
 8003e4a:	2304      	movs	r3, #4
 8003e4c:	77fb      	strb	r3, [r7, #31]
 8003e4e:	e007      	b.n	8003e60 <UART_SetConfig+0x348>
 8003e50:	2308      	movs	r3, #8
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e004      	b.n	8003e60 <UART_SetConfig+0x348>
 8003e56:	2310      	movs	r3, #16
 8003e58:	77fb      	strb	r3, [r7, #31]
 8003e5a:	e001      	b.n	8003e60 <UART_SetConfig+0x348>
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e68:	d15b      	bne.n	8003f22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e6a:	7ffb      	ldrb	r3, [r7, #31]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d828      	bhi.n	8003ec2 <UART_SetConfig+0x3aa>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <UART_SetConfig+0x360>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e9d 	.word	0x08003e9d
 8003e7c:	08003ea5 	.word	0x08003ea5
 8003e80:	08003ead 	.word	0x08003ead
 8003e84:	08003ec3 	.word	0x08003ec3
 8003e88:	08003eb3 	.word	0x08003eb3
 8003e8c:	08003ec3 	.word	0x08003ec3
 8003e90:	08003ec3 	.word	0x08003ec3
 8003e94:	08003ec3 	.word	0x08003ec3
 8003e98:	08003ebb 	.word	0x08003ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f7fe ffb2 	bl	8002e04 <HAL_RCC_GetPCLK1Freq>
 8003ea0:	61b8      	str	r0, [r7, #24]
        break;
 8003ea2:	e013      	b.n	8003ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea4:	f7fe ffc2 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 8003ea8:	61b8      	str	r0, [r7, #24]
        break;
 8003eaa:	e00f      	b.n	8003ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eac:	4b4b      	ldr	r3, [pc, #300]	; (8003fdc <UART_SetConfig+0x4c4>)
 8003eae:	61bb      	str	r3, [r7, #24]
        break;
 8003eb0:	e00c      	b.n	8003ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb2:	f7fe fe95 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8003eb6:	61b8      	str	r0, [r7, #24]
        break;
 8003eb8:	e008      	b.n	8003ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ebe:	61bb      	str	r3, [r7, #24]
        break;
 8003ec0:	e004      	b.n	8003ecc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	77bb      	strb	r3, [r7, #30]
        break;
 8003eca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d074      	beq.n	8003fbc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	005a      	lsls	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	085b      	lsrs	r3, r3, #1
 8003edc:	441a      	add	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b0f      	cmp	r3, #15
 8003eec:	d916      	bls.n	8003f1c <UART_SetConfig+0x404>
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef4:	d212      	bcs.n	8003f1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f023 030f 	bic.w	r3, r3, #15
 8003efe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	89fb      	ldrh	r3, [r7, #14]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	89fa      	ldrh	r2, [r7, #14]
 8003f18:	60da      	str	r2, [r3, #12]
 8003f1a:	e04f      	b.n	8003fbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	77bb      	strb	r3, [r7, #30]
 8003f20:	e04c      	b.n	8003fbc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f22:	7ffb      	ldrb	r3, [r7, #31]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d828      	bhi.n	8003f7a <UART_SetConfig+0x462>
 8003f28:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <UART_SetConfig+0x418>)
 8003f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2e:	bf00      	nop
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08003f5d 	.word	0x08003f5d
 8003f38:	08003f65 	.word	0x08003f65
 8003f3c:	08003f7b 	.word	0x08003f7b
 8003f40:	08003f6b 	.word	0x08003f6b
 8003f44:	08003f7b 	.word	0x08003f7b
 8003f48:	08003f7b 	.word	0x08003f7b
 8003f4c:	08003f7b 	.word	0x08003f7b
 8003f50:	08003f73 	.word	0x08003f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f54:	f7fe ff56 	bl	8002e04 <HAL_RCC_GetPCLK1Freq>
 8003f58:	61b8      	str	r0, [r7, #24]
        break;
 8003f5a:	e013      	b.n	8003f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f5c:	f7fe ff66 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 8003f60:	61b8      	str	r0, [r7, #24]
        break;
 8003f62:	e00f      	b.n	8003f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f64:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <UART_SetConfig+0x4c4>)
 8003f66:	61bb      	str	r3, [r7, #24]
        break;
 8003f68:	e00c      	b.n	8003f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6a:	f7fe fe39 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8003f6e:	61b8      	str	r0, [r7, #24]
        break;
 8003f70:	e008      	b.n	8003f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f76:	61bb      	str	r3, [r7, #24]
        break;
 8003f78:	e004      	b.n	8003f84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	77bb      	strb	r3, [r7, #30]
        break;
 8003f82:	bf00      	nop
    }

    if (pclk != 0U)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d018      	beq.n	8003fbc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	085a      	lsrs	r2, r3, #1
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	441a      	add	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b0f      	cmp	r3, #15
 8003fa2:	d909      	bls.n	8003fb8 <UART_SetConfig+0x4a0>
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003faa:	d205      	bcs.n	8003fb8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	e001      	b.n	8003fbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003fc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40007c00 	.word	0x40007c00
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	00f42400 	.word	0x00f42400

08003fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01a      	beq.n	80040f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040de:	d10a      	bne.n	80040f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]
  }
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af02      	add	r7, sp, #8
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004134:	f7fd fd36 	bl	8001ba4 <HAL_GetTick>
 8004138:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b08      	cmp	r3, #8
 8004146:	d10e      	bne.n	8004166 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f831 	bl	80041be <UART_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e027      	b.n	80041b6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b04      	cmp	r3, #4
 8004172:	d10e      	bne.n	8004192 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f81b 	bl	80041be <UART_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e011      	b.n	80041b6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b09c      	sub	sp, #112	; 0x70
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	4613      	mov	r3, r2
 80041cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ce:	e0a7      	b.n	8004320 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	f000 80a3 	beq.w	8004320 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041da:	f7fd fce3 	bl	8001ba4 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d302      	bcc.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80041ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d13f      	bne.n	8004270 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004204:	667b      	str	r3, [r7, #100]	; 0x64
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800420e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004210:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004214:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800421c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e6      	bne.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3308      	adds	r3, #8
 8004228:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	663b      	str	r3, [r7, #96]	; 0x60
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3308      	adds	r3, #8
 8004240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004242:	64ba      	str	r2, [r7, #72]	; 0x48
 8004244:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004246:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e5      	bne.n	8004222 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e068      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d050      	beq.n	8004320 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428c:	d148      	bne.n	8004320 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004296:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b6:	637b      	str	r3, [r7, #52]	; 0x34
 80042b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e6      	bne.n	8004298 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3308      	adds	r3, #8
 80042d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	613b      	str	r3, [r7, #16]
   return(result);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3308      	adds	r3, #8
 80042e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042ea:	623a      	str	r2, [r7, #32]
 80042ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	69f9      	ldr	r1, [r7, #28]
 80042f0:	6a3a      	ldr	r2, [r7, #32]
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e5      	bne.n	80042ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e010      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	429a      	cmp	r2, r3
 800433c:	f43f af48 	beq.w	80041d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3770      	adds	r7, #112	; 0x70
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800434c:	b084      	sub	sp, #16
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	f107 001c 	add.w	r0, r7, #28
 800435a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2b01      	cmp	r3, #1
 8004362:	d120      	bne.n	80043a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <USB_CoreInit+0xac>)
 8004376:	4013      	ands	r3, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d105      	bne.n	800439a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fa96 	bl	80048cc <USB_CoreReset>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e010      	b.n	80043c8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fa8a 	bl	80048cc <USB_CoreReset>
 80043b8:	4603      	mov	r3, r0
 80043ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d10b      	bne.n	80043e6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f043 0206 	orr.w	r2, r3, #6
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043f2:	b004      	add	sp, #16
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	ffbdffbf 	.word	0xffbdffbf

080043fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f023 0201 	bic.w	r2, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	460b      	mov	r3, r1
 8004428:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d115      	bne.n	800446c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800444c:	2001      	movs	r0, #1
 800444e:	f7fd fbb5 	bl	8001bbc <HAL_Delay>
      ms++;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3301      	adds	r3, #1
 8004456:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fa29 	bl	80048b0 <USB_GetMode>
 800445e:	4603      	mov	r3, r0
 8004460:	2b01      	cmp	r3, #1
 8004462:	d01e      	beq.n	80044a2 <USB_SetCurrentMode+0x84>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b31      	cmp	r3, #49	; 0x31
 8004468:	d9f0      	bls.n	800444c <USB_SetCurrentMode+0x2e>
 800446a:	e01a      	b.n	80044a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d115      	bne.n	800449e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800447e:	2001      	movs	r0, #1
 8004480:	f7fd fb9c 	bl	8001bbc <HAL_Delay>
      ms++;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3301      	adds	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa10 	bl	80048b0 <USB_GetMode>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <USB_SetCurrentMode+0x84>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b31      	cmp	r3, #49	; 0x31
 800449a:	d9f0      	bls.n	800447e <USB_SetCurrentMode+0x60>
 800449c:	e001      	b.n	80044a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e005      	b.n	80044ae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b32      	cmp	r3, #50	; 0x32
 80044a6:	d101      	bne.n	80044ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044b8:	b084      	sub	sp, #16
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b086      	sub	sp, #24
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	e009      	b.n	80044ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	3340      	adds	r3, #64	; 0x40
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	2200      	movs	r2, #0
 80044e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	3301      	adds	r3, #1
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b0e      	cmp	r3, #14
 80044f0:	d9f2      	bls.n	80044d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d11c      	bne.n	8004532 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004506:	f043 0302 	orr.w	r3, r3, #2
 800450a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	e005      	b.n	800453e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004544:	461a      	mov	r2, r3
 8004546:	2300      	movs	r3, #0
 8004548:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004550:	4619      	mov	r1, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004558:	461a      	mov	r2, r3
 800455a:	680b      	ldr	r3, [r1, #0]
 800455c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	2b01      	cmp	r3, #1
 8004562:	d10c      	bne.n	800457e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d104      	bne.n	8004574 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800456a:	2100      	movs	r1, #0
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f965 	bl	800483c <USB_SetDevSpeed>
 8004572:	e008      	b.n	8004586 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004574:	2101      	movs	r1, #1
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f960 	bl	800483c <USB_SetDevSpeed>
 800457c:	e003      	b.n	8004586 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800457e:	2103      	movs	r1, #3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f95b 	bl	800483c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004586:	2110      	movs	r1, #16
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f8f3 	bl	8004774 <USB_FlushTxFifo>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f91f 	bl	80047dc <USB_FlushRxFifo>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ae:	461a      	mov	r2, r3
 80045b0:	2300      	movs	r3, #0
 80045b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ba:	461a      	mov	r2, r3
 80045bc:	2300      	movs	r3, #0
 80045be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c6:	461a      	mov	r2, r3
 80045c8:	2300      	movs	r3, #0
 80045ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	e043      	b.n	800465a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045e8:	d118      	bne.n	800461c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	461a      	mov	r2, r3
 80045fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	e013      	b.n	800462e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	461a      	mov	r2, r3
 8004614:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e008      	b.n	800462e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004628:	461a      	mov	r2, r3
 800462a:	2300      	movs	r3, #0
 800462c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463a:	461a      	mov	r2, r3
 800463c:	2300      	movs	r3, #0
 800463e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464c:	461a      	mov	r2, r3
 800464e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004652:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	3301      	adds	r3, #1
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	429a      	cmp	r2, r3
 8004660:	d3b7      	bcc.n	80045d2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004662:	2300      	movs	r3, #0
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	e043      	b.n	80046f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800467a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800467e:	d118      	bne.n	80046b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10a      	bne.n	800469c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004692:	461a      	mov	r2, r3
 8004694:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e013      	b.n	80046c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	461a      	mov	r2, r3
 80046aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	e008      	b.n	80046c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046be:	461a      	mov	r2, r3
 80046c0:	2300      	movs	r3, #0
 80046c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d0:	461a      	mov	r2, r3
 80046d2:	2300      	movs	r3, #0
 80046d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e2:	461a      	mov	r2, r3
 80046e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3301      	adds	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d3b7      	bcc.n	8004668 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800470a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004718:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	2b00      	cmp	r3, #0
 800471e:	d105      	bne.n	800472c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f043 0210 	orr.w	r2, r3, #16
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699a      	ldr	r2, [r3, #24]
 8004730:	4b0e      	ldr	r3, [pc, #56]	; (800476c <USB_DevInit+0x2b4>)
 8004732:	4313      	orrs	r3, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	f043 0208 	orr.w	r2, r3, #8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800474a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d105      	bne.n	800475c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699a      	ldr	r2, [r3, #24]
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <USB_DevInit+0x2b8>)
 8004756:	4313      	orrs	r3, r2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800475c:	7dfb      	ldrb	r3, [r7, #23]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004768:	b004      	add	sp, #16
 800476a:	4770      	bx	lr
 800476c:	803c3800 	.word	0x803c3800
 8004770:	40000004 	.word	0x40000004

08004774 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3301      	adds	r3, #1
 8004786:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a13      	ldr	r2, [pc, #76]	; (80047d8 <USB_FlushTxFifo+0x64>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d901      	bls.n	8004794 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e01b      	b.n	80047cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	daf2      	bge.n	8004782 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	019b      	lsls	r3, r3, #6
 80047a4:	f043 0220 	orr.w	r2, r3, #32
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3301      	adds	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <USB_FlushTxFifo+0x64>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e006      	b.n	80047cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d0f0      	beq.n	80047ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	00030d40 	.word	0x00030d40

080047dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3301      	adds	r3, #1
 80047ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4a11      	ldr	r2, [pc, #68]	; (8004838 <USB_FlushRxFifo+0x5c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e018      	b.n	800482c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	daf2      	bge.n	80047e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2210      	movs	r2, #16
 800480a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3301      	adds	r3, #1
 8004810:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a08      	ldr	r2, [pc, #32]	; (8004838 <USB_FlushRxFifo+0x5c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e006      	b.n	800482c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b10      	cmp	r3, #16
 8004828:	d0f0      	beq.n	800480c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	00030d40 	.word	0x00030d40

0800483c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	68f9      	ldr	r1, [r7, #12]
 8004858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800485c:	4313      	orrs	r3, r2
 800485e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004888:	f023 0303 	bic.w	r3, r3, #3
 800488c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800489c:	f043 0302 	orr.w	r3, r3, #2
 80048a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f003 0301 	and.w	r3, r3, #1
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3301      	adds	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4a13      	ldr	r2, [pc, #76]	; (8004930 <USB_CoreReset+0x64>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e01b      	b.n	8004922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	daf2      	bge.n	80048d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f043 0201 	orr.w	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3301      	adds	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a09      	ldr	r2, [pc, #36]	; (8004930 <USB_CoreReset+0x64>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d901      	bls.n	8004914 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e006      	b.n	8004922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d0f0      	beq.n	8004902 <USB_CoreReset+0x36>

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	00030d40 	.word	0x00030d40

08004934 <std>:
 8004934:	2300      	movs	r3, #0
 8004936:	b510      	push	{r4, lr}
 8004938:	4604      	mov	r4, r0
 800493a:	e9c0 3300 	strd	r3, r3, [r0]
 800493e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004942:	6083      	str	r3, [r0, #8]
 8004944:	8181      	strh	r1, [r0, #12]
 8004946:	6643      	str	r3, [r0, #100]	; 0x64
 8004948:	81c2      	strh	r2, [r0, #14]
 800494a:	6183      	str	r3, [r0, #24]
 800494c:	4619      	mov	r1, r3
 800494e:	2208      	movs	r2, #8
 8004950:	305c      	adds	r0, #92	; 0x5c
 8004952:	f000 f9f7 	bl	8004d44 <memset>
 8004956:	4b0d      	ldr	r3, [pc, #52]	; (800498c <std+0x58>)
 8004958:	6263      	str	r3, [r4, #36]	; 0x24
 800495a:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <std+0x5c>)
 800495c:	62a3      	str	r3, [r4, #40]	; 0x28
 800495e:	4b0d      	ldr	r3, [pc, #52]	; (8004994 <std+0x60>)
 8004960:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004962:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <std+0x64>)
 8004964:	6323      	str	r3, [r4, #48]	; 0x30
 8004966:	4b0d      	ldr	r3, [pc, #52]	; (800499c <std+0x68>)
 8004968:	6224      	str	r4, [r4, #32]
 800496a:	429c      	cmp	r4, r3
 800496c:	d006      	beq.n	800497c <std+0x48>
 800496e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004972:	4294      	cmp	r4, r2
 8004974:	d002      	beq.n	800497c <std+0x48>
 8004976:	33d0      	adds	r3, #208	; 0xd0
 8004978:	429c      	cmp	r4, r3
 800497a:	d105      	bne.n	8004988 <std+0x54>
 800497c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004984:	f000 ba56 	b.w	8004e34 <__retarget_lock_init_recursive>
 8004988:	bd10      	pop	{r4, pc}
 800498a:	bf00      	nop
 800498c:	08004b95 	.word	0x08004b95
 8004990:	08004bb7 	.word	0x08004bb7
 8004994:	08004bef 	.word	0x08004bef
 8004998:	08004c13 	.word	0x08004c13
 800499c:	20000770 	.word	0x20000770

080049a0 <stdio_exit_handler>:
 80049a0:	4a02      	ldr	r2, [pc, #8]	; (80049ac <stdio_exit_handler+0xc>)
 80049a2:	4903      	ldr	r1, [pc, #12]	; (80049b0 <stdio_exit_handler+0x10>)
 80049a4:	4803      	ldr	r0, [pc, #12]	; (80049b4 <stdio_exit_handler+0x14>)
 80049a6:	f000 b869 	b.w	8004a7c <_fwalk_sglue>
 80049aa:	bf00      	nop
 80049ac:	2000000c 	.word	0x2000000c
 80049b0:	080056e1 	.word	0x080056e1
 80049b4:	20000018 	.word	0x20000018

080049b8 <cleanup_stdio>:
 80049b8:	6841      	ldr	r1, [r0, #4]
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <cleanup_stdio+0x34>)
 80049bc:	4299      	cmp	r1, r3
 80049be:	b510      	push	{r4, lr}
 80049c0:	4604      	mov	r4, r0
 80049c2:	d001      	beq.n	80049c8 <cleanup_stdio+0x10>
 80049c4:	f000 fe8c 	bl	80056e0 <_fflush_r>
 80049c8:	68a1      	ldr	r1, [r4, #8]
 80049ca:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <cleanup_stdio+0x38>)
 80049cc:	4299      	cmp	r1, r3
 80049ce:	d002      	beq.n	80049d6 <cleanup_stdio+0x1e>
 80049d0:	4620      	mov	r0, r4
 80049d2:	f000 fe85 	bl	80056e0 <_fflush_r>
 80049d6:	68e1      	ldr	r1, [r4, #12]
 80049d8:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <cleanup_stdio+0x3c>)
 80049da:	4299      	cmp	r1, r3
 80049dc:	d004      	beq.n	80049e8 <cleanup_stdio+0x30>
 80049de:	4620      	mov	r0, r4
 80049e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e4:	f000 be7c 	b.w	80056e0 <_fflush_r>
 80049e8:	bd10      	pop	{r4, pc}
 80049ea:	bf00      	nop
 80049ec:	20000770 	.word	0x20000770
 80049f0:	200007d8 	.word	0x200007d8
 80049f4:	20000840 	.word	0x20000840

080049f8 <global_stdio_init.part.0>:
 80049f8:	b510      	push	{r4, lr}
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <global_stdio_init.part.0+0x30>)
 80049fc:	4c0b      	ldr	r4, [pc, #44]	; (8004a2c <global_stdio_init.part.0+0x34>)
 80049fe:	4a0c      	ldr	r2, [pc, #48]	; (8004a30 <global_stdio_init.part.0+0x38>)
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	4620      	mov	r0, r4
 8004a04:	2200      	movs	r2, #0
 8004a06:	2104      	movs	r1, #4
 8004a08:	f7ff ff94 	bl	8004934 <std>
 8004a0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a10:	2201      	movs	r2, #1
 8004a12:	2109      	movs	r1, #9
 8004a14:	f7ff ff8e 	bl	8004934 <std>
 8004a18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a22:	2112      	movs	r1, #18
 8004a24:	f7ff bf86 	b.w	8004934 <std>
 8004a28:	200008a8 	.word	0x200008a8
 8004a2c:	20000770 	.word	0x20000770
 8004a30:	080049a1 	.word	0x080049a1

08004a34 <__sfp_lock_acquire>:
 8004a34:	4801      	ldr	r0, [pc, #4]	; (8004a3c <__sfp_lock_acquire+0x8>)
 8004a36:	f000 b9fe 	b.w	8004e36 <__retarget_lock_acquire_recursive>
 8004a3a:	bf00      	nop
 8004a3c:	200008b1 	.word	0x200008b1

08004a40 <__sfp_lock_release>:
 8004a40:	4801      	ldr	r0, [pc, #4]	; (8004a48 <__sfp_lock_release+0x8>)
 8004a42:	f000 b9f9 	b.w	8004e38 <__retarget_lock_release_recursive>
 8004a46:	bf00      	nop
 8004a48:	200008b1 	.word	0x200008b1

08004a4c <__sinit>:
 8004a4c:	b510      	push	{r4, lr}
 8004a4e:	4604      	mov	r4, r0
 8004a50:	f7ff fff0 	bl	8004a34 <__sfp_lock_acquire>
 8004a54:	6a23      	ldr	r3, [r4, #32]
 8004a56:	b11b      	cbz	r3, 8004a60 <__sinit+0x14>
 8004a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a5c:	f7ff bff0 	b.w	8004a40 <__sfp_lock_release>
 8004a60:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <__sinit+0x28>)
 8004a62:	6223      	str	r3, [r4, #32]
 8004a64:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <__sinit+0x2c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f5      	bne.n	8004a58 <__sinit+0xc>
 8004a6c:	f7ff ffc4 	bl	80049f8 <global_stdio_init.part.0>
 8004a70:	e7f2      	b.n	8004a58 <__sinit+0xc>
 8004a72:	bf00      	nop
 8004a74:	080049b9 	.word	0x080049b9
 8004a78:	200008a8 	.word	0x200008a8

08004a7c <_fwalk_sglue>:
 8004a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a80:	4607      	mov	r7, r0
 8004a82:	4688      	mov	r8, r1
 8004a84:	4614      	mov	r4, r2
 8004a86:	2600      	movs	r6, #0
 8004a88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a8c:	f1b9 0901 	subs.w	r9, r9, #1
 8004a90:	d505      	bpl.n	8004a9e <_fwalk_sglue+0x22>
 8004a92:	6824      	ldr	r4, [r4, #0]
 8004a94:	2c00      	cmp	r4, #0
 8004a96:	d1f7      	bne.n	8004a88 <_fwalk_sglue+0xc>
 8004a98:	4630      	mov	r0, r6
 8004a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a9e:	89ab      	ldrh	r3, [r5, #12]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d907      	bls.n	8004ab4 <_fwalk_sglue+0x38>
 8004aa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	d003      	beq.n	8004ab4 <_fwalk_sglue+0x38>
 8004aac:	4629      	mov	r1, r5
 8004aae:	4638      	mov	r0, r7
 8004ab0:	47c0      	blx	r8
 8004ab2:	4306      	orrs	r6, r0
 8004ab4:	3568      	adds	r5, #104	; 0x68
 8004ab6:	e7e9      	b.n	8004a8c <_fwalk_sglue+0x10>

08004ab8 <iprintf>:
 8004ab8:	b40f      	push	{r0, r1, r2, r3}
 8004aba:	b507      	push	{r0, r1, r2, lr}
 8004abc:	4906      	ldr	r1, [pc, #24]	; (8004ad8 <iprintf+0x20>)
 8004abe:	ab04      	add	r3, sp, #16
 8004ac0:	6808      	ldr	r0, [r1, #0]
 8004ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ac6:	6881      	ldr	r1, [r0, #8]
 8004ac8:	9301      	str	r3, [sp, #4]
 8004aca:	f000 fad9 	bl	8005080 <_vfiprintf_r>
 8004ace:	b003      	add	sp, #12
 8004ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ad4:	b004      	add	sp, #16
 8004ad6:	4770      	bx	lr
 8004ad8:	20000064 	.word	0x20000064

08004adc <_puts_r>:
 8004adc:	6a03      	ldr	r3, [r0, #32]
 8004ade:	b570      	push	{r4, r5, r6, lr}
 8004ae0:	6884      	ldr	r4, [r0, #8]
 8004ae2:	4605      	mov	r5, r0
 8004ae4:	460e      	mov	r6, r1
 8004ae6:	b90b      	cbnz	r3, 8004aec <_puts_r+0x10>
 8004ae8:	f7ff ffb0 	bl	8004a4c <__sinit>
 8004aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aee:	07db      	lsls	r3, r3, #31
 8004af0:	d405      	bmi.n	8004afe <_puts_r+0x22>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	0598      	lsls	r0, r3, #22
 8004af6:	d402      	bmi.n	8004afe <_puts_r+0x22>
 8004af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004afa:	f000 f99c 	bl	8004e36 <__retarget_lock_acquire_recursive>
 8004afe:	89a3      	ldrh	r3, [r4, #12]
 8004b00:	0719      	lsls	r1, r3, #28
 8004b02:	d513      	bpl.n	8004b2c <_puts_r+0x50>
 8004b04:	6923      	ldr	r3, [r4, #16]
 8004b06:	b18b      	cbz	r3, 8004b2c <_puts_r+0x50>
 8004b08:	3e01      	subs	r6, #1
 8004b0a:	68a3      	ldr	r3, [r4, #8]
 8004b0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b10:	3b01      	subs	r3, #1
 8004b12:	60a3      	str	r3, [r4, #8]
 8004b14:	b9e9      	cbnz	r1, 8004b52 <_puts_r+0x76>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	da2e      	bge.n	8004b78 <_puts_r+0x9c>
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	210a      	movs	r1, #10
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f000 f87b 	bl	8004c1a <__swbuf_r>
 8004b24:	3001      	adds	r0, #1
 8004b26:	d007      	beq.n	8004b38 <_puts_r+0x5c>
 8004b28:	250a      	movs	r5, #10
 8004b2a:	e007      	b.n	8004b3c <_puts_r+0x60>
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f000 f8b0 	bl	8004c94 <__swsetup_r>
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d0e7      	beq.n	8004b08 <_puts_r+0x2c>
 8004b38:	f04f 35ff 	mov.w	r5, #4294967295
 8004b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b3e:	07da      	lsls	r2, r3, #31
 8004b40:	d405      	bmi.n	8004b4e <_puts_r+0x72>
 8004b42:	89a3      	ldrh	r3, [r4, #12]
 8004b44:	059b      	lsls	r3, r3, #22
 8004b46:	d402      	bmi.n	8004b4e <_puts_r+0x72>
 8004b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b4a:	f000 f975 	bl	8004e38 <__retarget_lock_release_recursive>
 8004b4e:	4628      	mov	r0, r5
 8004b50:	bd70      	pop	{r4, r5, r6, pc}
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	da04      	bge.n	8004b60 <_puts_r+0x84>
 8004b56:	69a2      	ldr	r2, [r4, #24]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	dc06      	bgt.n	8004b6a <_puts_r+0x8e>
 8004b5c:	290a      	cmp	r1, #10
 8004b5e:	d004      	beq.n	8004b6a <_puts_r+0x8e>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	6022      	str	r2, [r4, #0]
 8004b66:	7019      	strb	r1, [r3, #0]
 8004b68:	e7cf      	b.n	8004b0a <_puts_r+0x2e>
 8004b6a:	4622      	mov	r2, r4
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f000 f854 	bl	8004c1a <__swbuf_r>
 8004b72:	3001      	adds	r0, #1
 8004b74:	d1c9      	bne.n	8004b0a <_puts_r+0x2e>
 8004b76:	e7df      	b.n	8004b38 <_puts_r+0x5c>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	250a      	movs	r5, #10
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	6022      	str	r2, [r4, #0]
 8004b80:	701d      	strb	r5, [r3, #0]
 8004b82:	e7db      	b.n	8004b3c <_puts_r+0x60>

08004b84 <puts>:
 8004b84:	4b02      	ldr	r3, [pc, #8]	; (8004b90 <puts+0xc>)
 8004b86:	4601      	mov	r1, r0
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	f7ff bfa7 	b.w	8004adc <_puts_r>
 8004b8e:	bf00      	nop
 8004b90:	20000064 	.word	0x20000064

08004b94 <__sread>:
 8004b94:	b510      	push	{r4, lr}
 8004b96:	460c      	mov	r4, r1
 8004b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b9c:	f000 f8fc 	bl	8004d98 <_read_r>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	bfab      	itete	ge
 8004ba4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8004ba8:	181b      	addge	r3, r3, r0
 8004baa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bae:	bfac      	ite	ge
 8004bb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bb2:	81a3      	strhlt	r3, [r4, #12]
 8004bb4:	bd10      	pop	{r4, pc}

08004bb6 <__swrite>:
 8004bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bba:	461f      	mov	r7, r3
 8004bbc:	898b      	ldrh	r3, [r1, #12]
 8004bbe:	05db      	lsls	r3, r3, #23
 8004bc0:	4605      	mov	r5, r0
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	4616      	mov	r6, r2
 8004bc6:	d505      	bpl.n	8004bd4 <__swrite+0x1e>
 8004bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bcc:	2302      	movs	r3, #2
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f000 f8d0 	bl	8004d74 <_lseek_r>
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bde:	81a3      	strh	r3, [r4, #12]
 8004be0:	4632      	mov	r2, r6
 8004be2:	463b      	mov	r3, r7
 8004be4:	4628      	mov	r0, r5
 8004be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bea:	f000 b8e7 	b.w	8004dbc <_write_r>

08004bee <__sseek>:
 8004bee:	b510      	push	{r4, lr}
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf6:	f000 f8bd 	bl	8004d74 <_lseek_r>
 8004bfa:	1c43      	adds	r3, r0, #1
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	bf15      	itete	ne
 8004c00:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c0a:	81a3      	strheq	r3, [r4, #12]
 8004c0c:	bf18      	it	ne
 8004c0e:	81a3      	strhne	r3, [r4, #12]
 8004c10:	bd10      	pop	{r4, pc}

08004c12 <__sclose>:
 8004c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c16:	f000 b89d 	b.w	8004d54 <_close_r>

08004c1a <__swbuf_r>:
 8004c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1c:	460e      	mov	r6, r1
 8004c1e:	4614      	mov	r4, r2
 8004c20:	4605      	mov	r5, r0
 8004c22:	b118      	cbz	r0, 8004c2c <__swbuf_r+0x12>
 8004c24:	6a03      	ldr	r3, [r0, #32]
 8004c26:	b90b      	cbnz	r3, 8004c2c <__swbuf_r+0x12>
 8004c28:	f7ff ff10 	bl	8004a4c <__sinit>
 8004c2c:	69a3      	ldr	r3, [r4, #24]
 8004c2e:	60a3      	str	r3, [r4, #8]
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	071a      	lsls	r2, r3, #28
 8004c34:	d525      	bpl.n	8004c82 <__swbuf_r+0x68>
 8004c36:	6923      	ldr	r3, [r4, #16]
 8004c38:	b31b      	cbz	r3, 8004c82 <__swbuf_r+0x68>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	6922      	ldr	r2, [r4, #16]
 8004c3e:	1a98      	subs	r0, r3, r2
 8004c40:	6963      	ldr	r3, [r4, #20]
 8004c42:	b2f6      	uxtb	r6, r6
 8004c44:	4283      	cmp	r3, r0
 8004c46:	4637      	mov	r7, r6
 8004c48:	dc04      	bgt.n	8004c54 <__swbuf_r+0x3a>
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f000 fd47 	bl	80056e0 <_fflush_r>
 8004c52:	b9e0      	cbnz	r0, 8004c8e <__swbuf_r+0x74>
 8004c54:	68a3      	ldr	r3, [r4, #8]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	60a3      	str	r3, [r4, #8]
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	6022      	str	r2, [r4, #0]
 8004c60:	701e      	strb	r6, [r3, #0]
 8004c62:	6962      	ldr	r2, [r4, #20]
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d004      	beq.n	8004c74 <__swbuf_r+0x5a>
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	07db      	lsls	r3, r3, #31
 8004c6e:	d506      	bpl.n	8004c7e <__swbuf_r+0x64>
 8004c70:	2e0a      	cmp	r6, #10
 8004c72:	d104      	bne.n	8004c7e <__swbuf_r+0x64>
 8004c74:	4621      	mov	r1, r4
 8004c76:	4628      	mov	r0, r5
 8004c78:	f000 fd32 	bl	80056e0 <_fflush_r>
 8004c7c:	b938      	cbnz	r0, 8004c8e <__swbuf_r+0x74>
 8004c7e:	4638      	mov	r0, r7
 8004c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c82:	4621      	mov	r1, r4
 8004c84:	4628      	mov	r0, r5
 8004c86:	f000 f805 	bl	8004c94 <__swsetup_r>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d0d5      	beq.n	8004c3a <__swbuf_r+0x20>
 8004c8e:	f04f 37ff 	mov.w	r7, #4294967295
 8004c92:	e7f4      	b.n	8004c7e <__swbuf_r+0x64>

08004c94 <__swsetup_r>:
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	4b2a      	ldr	r3, [pc, #168]	; (8004d40 <__swsetup_r+0xac>)
 8004c98:	4605      	mov	r5, r0
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	460c      	mov	r4, r1
 8004c9e:	b118      	cbz	r0, 8004ca8 <__swsetup_r+0x14>
 8004ca0:	6a03      	ldr	r3, [r0, #32]
 8004ca2:	b90b      	cbnz	r3, 8004ca8 <__swsetup_r+0x14>
 8004ca4:	f7ff fed2 	bl	8004a4c <__sinit>
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cae:	0718      	lsls	r0, r3, #28
 8004cb0:	d422      	bmi.n	8004cf8 <__swsetup_r+0x64>
 8004cb2:	06d9      	lsls	r1, r3, #27
 8004cb4:	d407      	bmi.n	8004cc6 <__swsetup_r+0x32>
 8004cb6:	2309      	movs	r3, #9
 8004cb8:	602b      	str	r3, [r5, #0]
 8004cba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cbe:	81a3      	strh	r3, [r4, #12]
 8004cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc4:	e034      	b.n	8004d30 <__swsetup_r+0x9c>
 8004cc6:	0758      	lsls	r0, r3, #29
 8004cc8:	d512      	bpl.n	8004cf0 <__swsetup_r+0x5c>
 8004cca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ccc:	b141      	cbz	r1, 8004ce0 <__swsetup_r+0x4c>
 8004cce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cd2:	4299      	cmp	r1, r3
 8004cd4:	d002      	beq.n	8004cdc <__swsetup_r+0x48>
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 f8b0 	bl	8004e3c <_free_r>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	6363      	str	r3, [r4, #52]	; 0x34
 8004ce0:	89a3      	ldrh	r3, [r4, #12]
 8004ce2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ce6:	81a3      	strh	r3, [r4, #12]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	6063      	str	r3, [r4, #4]
 8004cec:	6923      	ldr	r3, [r4, #16]
 8004cee:	6023      	str	r3, [r4, #0]
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	f043 0308 	orr.w	r3, r3, #8
 8004cf6:	81a3      	strh	r3, [r4, #12]
 8004cf8:	6923      	ldr	r3, [r4, #16]
 8004cfa:	b94b      	cbnz	r3, 8004d10 <__swsetup_r+0x7c>
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d06:	d003      	beq.n	8004d10 <__swsetup_r+0x7c>
 8004d08:	4621      	mov	r1, r4
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 fd36 	bl	800577c <__smakebuf_r>
 8004d10:	89a0      	ldrh	r0, [r4, #12]
 8004d12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d16:	f010 0301 	ands.w	r3, r0, #1
 8004d1a:	d00a      	beq.n	8004d32 <__swsetup_r+0x9e>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60a3      	str	r3, [r4, #8]
 8004d20:	6963      	ldr	r3, [r4, #20]
 8004d22:	425b      	negs	r3, r3
 8004d24:	61a3      	str	r3, [r4, #24]
 8004d26:	6923      	ldr	r3, [r4, #16]
 8004d28:	b943      	cbnz	r3, 8004d3c <__swsetup_r+0xa8>
 8004d2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d2e:	d1c4      	bne.n	8004cba <__swsetup_r+0x26>
 8004d30:	bd38      	pop	{r3, r4, r5, pc}
 8004d32:	0781      	lsls	r1, r0, #30
 8004d34:	bf58      	it	pl
 8004d36:	6963      	ldrpl	r3, [r4, #20]
 8004d38:	60a3      	str	r3, [r4, #8]
 8004d3a:	e7f4      	b.n	8004d26 <__swsetup_r+0x92>
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	e7f7      	b.n	8004d30 <__swsetup_r+0x9c>
 8004d40:	20000064 	.word	0x20000064

08004d44 <memset>:
 8004d44:	4402      	add	r2, r0
 8004d46:	4603      	mov	r3, r0
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d100      	bne.n	8004d4e <memset+0xa>
 8004d4c:	4770      	bx	lr
 8004d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d52:	e7f9      	b.n	8004d48 <memset+0x4>

08004d54 <_close_r>:
 8004d54:	b538      	push	{r3, r4, r5, lr}
 8004d56:	4d06      	ldr	r5, [pc, #24]	; (8004d70 <_close_r+0x1c>)
 8004d58:	2300      	movs	r3, #0
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	4608      	mov	r0, r1
 8004d5e:	602b      	str	r3, [r5, #0]
 8004d60:	f7fc fe29 	bl	80019b6 <_close>
 8004d64:	1c43      	adds	r3, r0, #1
 8004d66:	d102      	bne.n	8004d6e <_close_r+0x1a>
 8004d68:	682b      	ldr	r3, [r5, #0]
 8004d6a:	b103      	cbz	r3, 8004d6e <_close_r+0x1a>
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
 8004d70:	200008ac 	.word	0x200008ac

08004d74 <_lseek_r>:
 8004d74:	b538      	push	{r3, r4, r5, lr}
 8004d76:	4d07      	ldr	r5, [pc, #28]	; (8004d94 <_lseek_r+0x20>)
 8004d78:	4604      	mov	r4, r0
 8004d7a:	4608      	mov	r0, r1
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	2200      	movs	r2, #0
 8004d80:	602a      	str	r2, [r5, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	f7fc fe3e 	bl	8001a04 <_lseek>
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d102      	bne.n	8004d92 <_lseek_r+0x1e>
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	b103      	cbz	r3, 8004d92 <_lseek_r+0x1e>
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	bd38      	pop	{r3, r4, r5, pc}
 8004d94:	200008ac 	.word	0x200008ac

08004d98 <_read_r>:
 8004d98:	b538      	push	{r3, r4, r5, lr}
 8004d9a:	4d07      	ldr	r5, [pc, #28]	; (8004db8 <_read_r+0x20>)
 8004d9c:	4604      	mov	r4, r0
 8004d9e:	4608      	mov	r0, r1
 8004da0:	4611      	mov	r1, r2
 8004da2:	2200      	movs	r2, #0
 8004da4:	602a      	str	r2, [r5, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	f7fc fdcc 	bl	8001944 <_read>
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	d102      	bne.n	8004db6 <_read_r+0x1e>
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	b103      	cbz	r3, 8004db6 <_read_r+0x1e>
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	bd38      	pop	{r3, r4, r5, pc}
 8004db8:	200008ac 	.word	0x200008ac

08004dbc <_write_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4d07      	ldr	r5, [pc, #28]	; (8004ddc <_write_r+0x20>)
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	4608      	mov	r0, r1
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	602a      	str	r2, [r5, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f7fc fdd7 	bl	800197e <_write>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d102      	bne.n	8004dda <_write_r+0x1e>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	b103      	cbz	r3, 8004dda <_write_r+0x1e>
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	200008ac 	.word	0x200008ac

08004de0 <__errno>:
 8004de0:	4b01      	ldr	r3, [pc, #4]	; (8004de8 <__errno+0x8>)
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	20000064 	.word	0x20000064

08004dec <__libc_init_array>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	4d0d      	ldr	r5, [pc, #52]	; (8004e24 <__libc_init_array+0x38>)
 8004df0:	4c0d      	ldr	r4, [pc, #52]	; (8004e28 <__libc_init_array+0x3c>)
 8004df2:	1b64      	subs	r4, r4, r5
 8004df4:	10a4      	asrs	r4, r4, #2
 8004df6:	2600      	movs	r6, #0
 8004df8:	42a6      	cmp	r6, r4
 8004dfa:	d109      	bne.n	8004e10 <__libc_init_array+0x24>
 8004dfc:	4d0b      	ldr	r5, [pc, #44]	; (8004e2c <__libc_init_array+0x40>)
 8004dfe:	4c0c      	ldr	r4, [pc, #48]	; (8004e30 <__libc_init_array+0x44>)
 8004e00:	f000 fd2a 	bl	8005858 <_init>
 8004e04:	1b64      	subs	r4, r4, r5
 8004e06:	10a4      	asrs	r4, r4, #2
 8004e08:	2600      	movs	r6, #0
 8004e0a:	42a6      	cmp	r6, r4
 8004e0c:	d105      	bne.n	8004e1a <__libc_init_array+0x2e>
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e14:	4798      	blx	r3
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7ee      	b.n	8004df8 <__libc_init_array+0xc>
 8004e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e1e:	4798      	blx	r3
 8004e20:	3601      	adds	r6, #1
 8004e22:	e7f2      	b.n	8004e0a <__libc_init_array+0x1e>
 8004e24:	08005c30 	.word	0x08005c30
 8004e28:	08005c30 	.word	0x08005c30
 8004e2c:	08005c30 	.word	0x08005c30
 8004e30:	08005c34 	.word	0x08005c34

08004e34 <__retarget_lock_init_recursive>:
 8004e34:	4770      	bx	lr

08004e36 <__retarget_lock_acquire_recursive>:
 8004e36:	4770      	bx	lr

08004e38 <__retarget_lock_release_recursive>:
 8004e38:	4770      	bx	lr
	...

08004e3c <_free_r>:
 8004e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e3e:	2900      	cmp	r1, #0
 8004e40:	d044      	beq.n	8004ecc <_free_r+0x90>
 8004e42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e46:	9001      	str	r0, [sp, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f1a1 0404 	sub.w	r4, r1, #4
 8004e4e:	bfb8      	it	lt
 8004e50:	18e4      	addlt	r4, r4, r3
 8004e52:	f000 f8df 	bl	8005014 <__malloc_lock>
 8004e56:	4a1e      	ldr	r2, [pc, #120]	; (8004ed0 <_free_r+0x94>)
 8004e58:	9801      	ldr	r0, [sp, #4]
 8004e5a:	6813      	ldr	r3, [r2, #0]
 8004e5c:	b933      	cbnz	r3, 8004e6c <_free_r+0x30>
 8004e5e:	6063      	str	r3, [r4, #4]
 8004e60:	6014      	str	r4, [r2, #0]
 8004e62:	b003      	add	sp, #12
 8004e64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e68:	f000 b8da 	b.w	8005020 <__malloc_unlock>
 8004e6c:	42a3      	cmp	r3, r4
 8004e6e:	d908      	bls.n	8004e82 <_free_r+0x46>
 8004e70:	6825      	ldr	r5, [r4, #0]
 8004e72:	1961      	adds	r1, r4, r5
 8004e74:	428b      	cmp	r3, r1
 8004e76:	bf01      	itttt	eq
 8004e78:	6819      	ldreq	r1, [r3, #0]
 8004e7a:	685b      	ldreq	r3, [r3, #4]
 8004e7c:	1949      	addeq	r1, r1, r5
 8004e7e:	6021      	streq	r1, [r4, #0]
 8004e80:	e7ed      	b.n	8004e5e <_free_r+0x22>
 8004e82:	461a      	mov	r2, r3
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	b10b      	cbz	r3, 8004e8c <_free_r+0x50>
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	d9fa      	bls.n	8004e82 <_free_r+0x46>
 8004e8c:	6811      	ldr	r1, [r2, #0]
 8004e8e:	1855      	adds	r5, r2, r1
 8004e90:	42a5      	cmp	r5, r4
 8004e92:	d10b      	bne.n	8004eac <_free_r+0x70>
 8004e94:	6824      	ldr	r4, [r4, #0]
 8004e96:	4421      	add	r1, r4
 8004e98:	1854      	adds	r4, r2, r1
 8004e9a:	42a3      	cmp	r3, r4
 8004e9c:	6011      	str	r1, [r2, #0]
 8004e9e:	d1e0      	bne.n	8004e62 <_free_r+0x26>
 8004ea0:	681c      	ldr	r4, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	6053      	str	r3, [r2, #4]
 8004ea6:	440c      	add	r4, r1
 8004ea8:	6014      	str	r4, [r2, #0]
 8004eaa:	e7da      	b.n	8004e62 <_free_r+0x26>
 8004eac:	d902      	bls.n	8004eb4 <_free_r+0x78>
 8004eae:	230c      	movs	r3, #12
 8004eb0:	6003      	str	r3, [r0, #0]
 8004eb2:	e7d6      	b.n	8004e62 <_free_r+0x26>
 8004eb4:	6825      	ldr	r5, [r4, #0]
 8004eb6:	1961      	adds	r1, r4, r5
 8004eb8:	428b      	cmp	r3, r1
 8004eba:	bf04      	itt	eq
 8004ebc:	6819      	ldreq	r1, [r3, #0]
 8004ebe:	685b      	ldreq	r3, [r3, #4]
 8004ec0:	6063      	str	r3, [r4, #4]
 8004ec2:	bf04      	itt	eq
 8004ec4:	1949      	addeq	r1, r1, r5
 8004ec6:	6021      	streq	r1, [r4, #0]
 8004ec8:	6054      	str	r4, [r2, #4]
 8004eca:	e7ca      	b.n	8004e62 <_free_r+0x26>
 8004ecc:	b003      	add	sp, #12
 8004ece:	bd30      	pop	{r4, r5, pc}
 8004ed0:	200008b4 	.word	0x200008b4

08004ed4 <sbrk_aligned>:
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	4e0e      	ldr	r6, [pc, #56]	; (8004f10 <sbrk_aligned+0x3c>)
 8004ed8:	460c      	mov	r4, r1
 8004eda:	6831      	ldr	r1, [r6, #0]
 8004edc:	4605      	mov	r5, r0
 8004ede:	b911      	cbnz	r1, 8004ee6 <sbrk_aligned+0x12>
 8004ee0:	f000 fcaa 	bl	8005838 <_sbrk_r>
 8004ee4:	6030      	str	r0, [r6, #0]
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f000 fca5 	bl	8005838 <_sbrk_r>
 8004eee:	1c43      	adds	r3, r0, #1
 8004ef0:	d00a      	beq.n	8004f08 <sbrk_aligned+0x34>
 8004ef2:	1cc4      	adds	r4, r0, #3
 8004ef4:	f024 0403 	bic.w	r4, r4, #3
 8004ef8:	42a0      	cmp	r0, r4
 8004efa:	d007      	beq.n	8004f0c <sbrk_aligned+0x38>
 8004efc:	1a21      	subs	r1, r4, r0
 8004efe:	4628      	mov	r0, r5
 8004f00:	f000 fc9a 	bl	8005838 <_sbrk_r>
 8004f04:	3001      	adds	r0, #1
 8004f06:	d101      	bne.n	8004f0c <sbrk_aligned+0x38>
 8004f08:	f04f 34ff 	mov.w	r4, #4294967295
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	200008b8 	.word	0x200008b8

08004f14 <_malloc_r>:
 8004f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f18:	1ccd      	adds	r5, r1, #3
 8004f1a:	f025 0503 	bic.w	r5, r5, #3
 8004f1e:	3508      	adds	r5, #8
 8004f20:	2d0c      	cmp	r5, #12
 8004f22:	bf38      	it	cc
 8004f24:	250c      	movcc	r5, #12
 8004f26:	2d00      	cmp	r5, #0
 8004f28:	4607      	mov	r7, r0
 8004f2a:	db01      	blt.n	8004f30 <_malloc_r+0x1c>
 8004f2c:	42a9      	cmp	r1, r5
 8004f2e:	d905      	bls.n	8004f3c <_malloc_r+0x28>
 8004f30:	230c      	movs	r3, #12
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	2600      	movs	r6, #0
 8004f36:	4630      	mov	r0, r6
 8004f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005010 <_malloc_r+0xfc>
 8004f40:	f000 f868 	bl	8005014 <__malloc_lock>
 8004f44:	f8d8 3000 	ldr.w	r3, [r8]
 8004f48:	461c      	mov	r4, r3
 8004f4a:	bb5c      	cbnz	r4, 8004fa4 <_malloc_r+0x90>
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	4638      	mov	r0, r7
 8004f50:	f7ff ffc0 	bl	8004ed4 <sbrk_aligned>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	4604      	mov	r4, r0
 8004f58:	d155      	bne.n	8005006 <_malloc_r+0xf2>
 8004f5a:	f8d8 4000 	ldr.w	r4, [r8]
 8004f5e:	4626      	mov	r6, r4
 8004f60:	2e00      	cmp	r6, #0
 8004f62:	d145      	bne.n	8004ff0 <_malloc_r+0xdc>
 8004f64:	2c00      	cmp	r4, #0
 8004f66:	d048      	beq.n	8004ffa <_malloc_r+0xe6>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	4631      	mov	r1, r6
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	eb04 0903 	add.w	r9, r4, r3
 8004f72:	f000 fc61 	bl	8005838 <_sbrk_r>
 8004f76:	4581      	cmp	r9, r0
 8004f78:	d13f      	bne.n	8004ffa <_malloc_r+0xe6>
 8004f7a:	6821      	ldr	r1, [r4, #0]
 8004f7c:	1a6d      	subs	r5, r5, r1
 8004f7e:	4629      	mov	r1, r5
 8004f80:	4638      	mov	r0, r7
 8004f82:	f7ff ffa7 	bl	8004ed4 <sbrk_aligned>
 8004f86:	3001      	adds	r0, #1
 8004f88:	d037      	beq.n	8004ffa <_malloc_r+0xe6>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	442b      	add	r3, r5
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	f8d8 3000 	ldr.w	r3, [r8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d038      	beq.n	800500a <_malloc_r+0xf6>
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	42a2      	cmp	r2, r4
 8004f9c:	d12b      	bne.n	8004ff6 <_malloc_r+0xe2>
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	e00f      	b.n	8004fc4 <_malloc_r+0xb0>
 8004fa4:	6822      	ldr	r2, [r4, #0]
 8004fa6:	1b52      	subs	r2, r2, r5
 8004fa8:	d41f      	bmi.n	8004fea <_malloc_r+0xd6>
 8004faa:	2a0b      	cmp	r2, #11
 8004fac:	d917      	bls.n	8004fde <_malloc_r+0xca>
 8004fae:	1961      	adds	r1, r4, r5
 8004fb0:	42a3      	cmp	r3, r4
 8004fb2:	6025      	str	r5, [r4, #0]
 8004fb4:	bf18      	it	ne
 8004fb6:	6059      	strne	r1, [r3, #4]
 8004fb8:	6863      	ldr	r3, [r4, #4]
 8004fba:	bf08      	it	eq
 8004fbc:	f8c8 1000 	streq.w	r1, [r8]
 8004fc0:	5162      	str	r2, [r4, r5]
 8004fc2:	604b      	str	r3, [r1, #4]
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	f104 060b 	add.w	r6, r4, #11
 8004fca:	f000 f829 	bl	8005020 <__malloc_unlock>
 8004fce:	f026 0607 	bic.w	r6, r6, #7
 8004fd2:	1d23      	adds	r3, r4, #4
 8004fd4:	1af2      	subs	r2, r6, r3
 8004fd6:	d0ae      	beq.n	8004f36 <_malloc_r+0x22>
 8004fd8:	1b9b      	subs	r3, r3, r6
 8004fda:	50a3      	str	r3, [r4, r2]
 8004fdc:	e7ab      	b.n	8004f36 <_malloc_r+0x22>
 8004fde:	42a3      	cmp	r3, r4
 8004fe0:	6862      	ldr	r2, [r4, #4]
 8004fe2:	d1dd      	bne.n	8004fa0 <_malloc_r+0x8c>
 8004fe4:	f8c8 2000 	str.w	r2, [r8]
 8004fe8:	e7ec      	b.n	8004fc4 <_malloc_r+0xb0>
 8004fea:	4623      	mov	r3, r4
 8004fec:	6864      	ldr	r4, [r4, #4]
 8004fee:	e7ac      	b.n	8004f4a <_malloc_r+0x36>
 8004ff0:	4634      	mov	r4, r6
 8004ff2:	6876      	ldr	r6, [r6, #4]
 8004ff4:	e7b4      	b.n	8004f60 <_malloc_r+0x4c>
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	e7cc      	b.n	8004f94 <_malloc_r+0x80>
 8004ffa:	230c      	movs	r3, #12
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	4638      	mov	r0, r7
 8005000:	f000 f80e 	bl	8005020 <__malloc_unlock>
 8005004:	e797      	b.n	8004f36 <_malloc_r+0x22>
 8005006:	6025      	str	r5, [r4, #0]
 8005008:	e7dc      	b.n	8004fc4 <_malloc_r+0xb0>
 800500a:	605b      	str	r3, [r3, #4]
 800500c:	deff      	udf	#255	; 0xff
 800500e:	bf00      	nop
 8005010:	200008b4 	.word	0x200008b4

08005014 <__malloc_lock>:
 8005014:	4801      	ldr	r0, [pc, #4]	; (800501c <__malloc_lock+0x8>)
 8005016:	f7ff bf0e 	b.w	8004e36 <__retarget_lock_acquire_recursive>
 800501a:	bf00      	nop
 800501c:	200008b0 	.word	0x200008b0

08005020 <__malloc_unlock>:
 8005020:	4801      	ldr	r0, [pc, #4]	; (8005028 <__malloc_unlock+0x8>)
 8005022:	f7ff bf09 	b.w	8004e38 <__retarget_lock_release_recursive>
 8005026:	bf00      	nop
 8005028:	200008b0 	.word	0x200008b0

0800502c <__sfputc_r>:
 800502c:	6893      	ldr	r3, [r2, #8]
 800502e:	3b01      	subs	r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	b410      	push	{r4}
 8005034:	6093      	str	r3, [r2, #8]
 8005036:	da08      	bge.n	800504a <__sfputc_r+0x1e>
 8005038:	6994      	ldr	r4, [r2, #24]
 800503a:	42a3      	cmp	r3, r4
 800503c:	db01      	blt.n	8005042 <__sfputc_r+0x16>
 800503e:	290a      	cmp	r1, #10
 8005040:	d103      	bne.n	800504a <__sfputc_r+0x1e>
 8005042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005046:	f7ff bde8 	b.w	8004c1a <__swbuf_r>
 800504a:	6813      	ldr	r3, [r2, #0]
 800504c:	1c58      	adds	r0, r3, #1
 800504e:	6010      	str	r0, [r2, #0]
 8005050:	7019      	strb	r1, [r3, #0]
 8005052:	4608      	mov	r0, r1
 8005054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005058:	4770      	bx	lr

0800505a <__sfputs_r>:
 800505a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505c:	4606      	mov	r6, r0
 800505e:	460f      	mov	r7, r1
 8005060:	4614      	mov	r4, r2
 8005062:	18d5      	adds	r5, r2, r3
 8005064:	42ac      	cmp	r4, r5
 8005066:	d101      	bne.n	800506c <__sfputs_r+0x12>
 8005068:	2000      	movs	r0, #0
 800506a:	e007      	b.n	800507c <__sfputs_r+0x22>
 800506c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005070:	463a      	mov	r2, r7
 8005072:	4630      	mov	r0, r6
 8005074:	f7ff ffda 	bl	800502c <__sfputc_r>
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	d1f3      	bne.n	8005064 <__sfputs_r+0xa>
 800507c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005080 <_vfiprintf_r>:
 8005080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005084:	460d      	mov	r5, r1
 8005086:	b09d      	sub	sp, #116	; 0x74
 8005088:	4614      	mov	r4, r2
 800508a:	4698      	mov	r8, r3
 800508c:	4606      	mov	r6, r0
 800508e:	b118      	cbz	r0, 8005098 <_vfiprintf_r+0x18>
 8005090:	6a03      	ldr	r3, [r0, #32]
 8005092:	b90b      	cbnz	r3, 8005098 <_vfiprintf_r+0x18>
 8005094:	f7ff fcda 	bl	8004a4c <__sinit>
 8005098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800509a:	07d9      	lsls	r1, r3, #31
 800509c:	d405      	bmi.n	80050aa <_vfiprintf_r+0x2a>
 800509e:	89ab      	ldrh	r3, [r5, #12]
 80050a0:	059a      	lsls	r2, r3, #22
 80050a2:	d402      	bmi.n	80050aa <_vfiprintf_r+0x2a>
 80050a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050a6:	f7ff fec6 	bl	8004e36 <__retarget_lock_acquire_recursive>
 80050aa:	89ab      	ldrh	r3, [r5, #12]
 80050ac:	071b      	lsls	r3, r3, #28
 80050ae:	d501      	bpl.n	80050b4 <_vfiprintf_r+0x34>
 80050b0:	692b      	ldr	r3, [r5, #16]
 80050b2:	b99b      	cbnz	r3, 80050dc <_vfiprintf_r+0x5c>
 80050b4:	4629      	mov	r1, r5
 80050b6:	4630      	mov	r0, r6
 80050b8:	f7ff fdec 	bl	8004c94 <__swsetup_r>
 80050bc:	b170      	cbz	r0, 80050dc <_vfiprintf_r+0x5c>
 80050be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050c0:	07dc      	lsls	r4, r3, #31
 80050c2:	d504      	bpl.n	80050ce <_vfiprintf_r+0x4e>
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	b01d      	add	sp, #116	; 0x74
 80050ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ce:	89ab      	ldrh	r3, [r5, #12]
 80050d0:	0598      	lsls	r0, r3, #22
 80050d2:	d4f7      	bmi.n	80050c4 <_vfiprintf_r+0x44>
 80050d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050d6:	f7ff feaf 	bl	8004e38 <__retarget_lock_release_recursive>
 80050da:	e7f3      	b.n	80050c4 <_vfiprintf_r+0x44>
 80050dc:	2300      	movs	r3, #0
 80050de:	9309      	str	r3, [sp, #36]	; 0x24
 80050e0:	2320      	movs	r3, #32
 80050e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80050ea:	2330      	movs	r3, #48	; 0x30
 80050ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80052a0 <_vfiprintf_r+0x220>
 80050f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050f4:	f04f 0901 	mov.w	r9, #1
 80050f8:	4623      	mov	r3, r4
 80050fa:	469a      	mov	sl, r3
 80050fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005100:	b10a      	cbz	r2, 8005106 <_vfiprintf_r+0x86>
 8005102:	2a25      	cmp	r2, #37	; 0x25
 8005104:	d1f9      	bne.n	80050fa <_vfiprintf_r+0x7a>
 8005106:	ebba 0b04 	subs.w	fp, sl, r4
 800510a:	d00b      	beq.n	8005124 <_vfiprintf_r+0xa4>
 800510c:	465b      	mov	r3, fp
 800510e:	4622      	mov	r2, r4
 8005110:	4629      	mov	r1, r5
 8005112:	4630      	mov	r0, r6
 8005114:	f7ff ffa1 	bl	800505a <__sfputs_r>
 8005118:	3001      	adds	r0, #1
 800511a:	f000 80a9 	beq.w	8005270 <_vfiprintf_r+0x1f0>
 800511e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005120:	445a      	add	r2, fp
 8005122:	9209      	str	r2, [sp, #36]	; 0x24
 8005124:	f89a 3000 	ldrb.w	r3, [sl]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80a1 	beq.w	8005270 <_vfiprintf_r+0x1f0>
 800512e:	2300      	movs	r3, #0
 8005130:	f04f 32ff 	mov.w	r2, #4294967295
 8005134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005138:	f10a 0a01 	add.w	sl, sl, #1
 800513c:	9304      	str	r3, [sp, #16]
 800513e:	9307      	str	r3, [sp, #28]
 8005140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005144:	931a      	str	r3, [sp, #104]	; 0x68
 8005146:	4654      	mov	r4, sl
 8005148:	2205      	movs	r2, #5
 800514a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800514e:	4854      	ldr	r0, [pc, #336]	; (80052a0 <_vfiprintf_r+0x220>)
 8005150:	f7fb f876 	bl	8000240 <memchr>
 8005154:	9a04      	ldr	r2, [sp, #16]
 8005156:	b9d8      	cbnz	r0, 8005190 <_vfiprintf_r+0x110>
 8005158:	06d1      	lsls	r1, r2, #27
 800515a:	bf44      	itt	mi
 800515c:	2320      	movmi	r3, #32
 800515e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005162:	0713      	lsls	r3, r2, #28
 8005164:	bf44      	itt	mi
 8005166:	232b      	movmi	r3, #43	; 0x2b
 8005168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800516c:	f89a 3000 	ldrb.w	r3, [sl]
 8005170:	2b2a      	cmp	r3, #42	; 0x2a
 8005172:	d015      	beq.n	80051a0 <_vfiprintf_r+0x120>
 8005174:	9a07      	ldr	r2, [sp, #28]
 8005176:	4654      	mov	r4, sl
 8005178:	2000      	movs	r0, #0
 800517a:	f04f 0c0a 	mov.w	ip, #10
 800517e:	4621      	mov	r1, r4
 8005180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005184:	3b30      	subs	r3, #48	; 0x30
 8005186:	2b09      	cmp	r3, #9
 8005188:	d94d      	bls.n	8005226 <_vfiprintf_r+0x1a6>
 800518a:	b1b0      	cbz	r0, 80051ba <_vfiprintf_r+0x13a>
 800518c:	9207      	str	r2, [sp, #28]
 800518e:	e014      	b.n	80051ba <_vfiprintf_r+0x13a>
 8005190:	eba0 0308 	sub.w	r3, r0, r8
 8005194:	fa09 f303 	lsl.w	r3, r9, r3
 8005198:	4313      	orrs	r3, r2
 800519a:	9304      	str	r3, [sp, #16]
 800519c:	46a2      	mov	sl, r4
 800519e:	e7d2      	b.n	8005146 <_vfiprintf_r+0xc6>
 80051a0:	9b03      	ldr	r3, [sp, #12]
 80051a2:	1d19      	adds	r1, r3, #4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	9103      	str	r1, [sp, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bfbb      	ittet	lt
 80051ac:	425b      	neglt	r3, r3
 80051ae:	f042 0202 	orrlt.w	r2, r2, #2
 80051b2:	9307      	strge	r3, [sp, #28]
 80051b4:	9307      	strlt	r3, [sp, #28]
 80051b6:	bfb8      	it	lt
 80051b8:	9204      	strlt	r2, [sp, #16]
 80051ba:	7823      	ldrb	r3, [r4, #0]
 80051bc:	2b2e      	cmp	r3, #46	; 0x2e
 80051be:	d10c      	bne.n	80051da <_vfiprintf_r+0x15a>
 80051c0:	7863      	ldrb	r3, [r4, #1]
 80051c2:	2b2a      	cmp	r3, #42	; 0x2a
 80051c4:	d134      	bne.n	8005230 <_vfiprintf_r+0x1b0>
 80051c6:	9b03      	ldr	r3, [sp, #12]
 80051c8:	1d1a      	adds	r2, r3, #4
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	9203      	str	r2, [sp, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	bfb8      	it	lt
 80051d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80051d6:	3402      	adds	r4, #2
 80051d8:	9305      	str	r3, [sp, #20]
 80051da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80052b0 <_vfiprintf_r+0x230>
 80051de:	7821      	ldrb	r1, [r4, #0]
 80051e0:	2203      	movs	r2, #3
 80051e2:	4650      	mov	r0, sl
 80051e4:	f7fb f82c 	bl	8000240 <memchr>
 80051e8:	b138      	cbz	r0, 80051fa <_vfiprintf_r+0x17a>
 80051ea:	9b04      	ldr	r3, [sp, #16]
 80051ec:	eba0 000a 	sub.w	r0, r0, sl
 80051f0:	2240      	movs	r2, #64	; 0x40
 80051f2:	4082      	lsls	r2, r0
 80051f4:	4313      	orrs	r3, r2
 80051f6:	3401      	adds	r4, #1
 80051f8:	9304      	str	r3, [sp, #16]
 80051fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051fe:	4829      	ldr	r0, [pc, #164]	; (80052a4 <_vfiprintf_r+0x224>)
 8005200:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005204:	2206      	movs	r2, #6
 8005206:	f7fb f81b 	bl	8000240 <memchr>
 800520a:	2800      	cmp	r0, #0
 800520c:	d03f      	beq.n	800528e <_vfiprintf_r+0x20e>
 800520e:	4b26      	ldr	r3, [pc, #152]	; (80052a8 <_vfiprintf_r+0x228>)
 8005210:	bb1b      	cbnz	r3, 800525a <_vfiprintf_r+0x1da>
 8005212:	9b03      	ldr	r3, [sp, #12]
 8005214:	3307      	adds	r3, #7
 8005216:	f023 0307 	bic.w	r3, r3, #7
 800521a:	3308      	adds	r3, #8
 800521c:	9303      	str	r3, [sp, #12]
 800521e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005220:	443b      	add	r3, r7
 8005222:	9309      	str	r3, [sp, #36]	; 0x24
 8005224:	e768      	b.n	80050f8 <_vfiprintf_r+0x78>
 8005226:	fb0c 3202 	mla	r2, ip, r2, r3
 800522a:	460c      	mov	r4, r1
 800522c:	2001      	movs	r0, #1
 800522e:	e7a6      	b.n	800517e <_vfiprintf_r+0xfe>
 8005230:	2300      	movs	r3, #0
 8005232:	3401      	adds	r4, #1
 8005234:	9305      	str	r3, [sp, #20]
 8005236:	4619      	mov	r1, r3
 8005238:	f04f 0c0a 	mov.w	ip, #10
 800523c:	4620      	mov	r0, r4
 800523e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005242:	3a30      	subs	r2, #48	; 0x30
 8005244:	2a09      	cmp	r2, #9
 8005246:	d903      	bls.n	8005250 <_vfiprintf_r+0x1d0>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0c6      	beq.n	80051da <_vfiprintf_r+0x15a>
 800524c:	9105      	str	r1, [sp, #20]
 800524e:	e7c4      	b.n	80051da <_vfiprintf_r+0x15a>
 8005250:	fb0c 2101 	mla	r1, ip, r1, r2
 8005254:	4604      	mov	r4, r0
 8005256:	2301      	movs	r3, #1
 8005258:	e7f0      	b.n	800523c <_vfiprintf_r+0x1bc>
 800525a:	ab03      	add	r3, sp, #12
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	462a      	mov	r2, r5
 8005260:	4b12      	ldr	r3, [pc, #72]	; (80052ac <_vfiprintf_r+0x22c>)
 8005262:	a904      	add	r1, sp, #16
 8005264:	4630      	mov	r0, r6
 8005266:	f3af 8000 	nop.w
 800526a:	4607      	mov	r7, r0
 800526c:	1c78      	adds	r0, r7, #1
 800526e:	d1d6      	bne.n	800521e <_vfiprintf_r+0x19e>
 8005270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005272:	07d9      	lsls	r1, r3, #31
 8005274:	d405      	bmi.n	8005282 <_vfiprintf_r+0x202>
 8005276:	89ab      	ldrh	r3, [r5, #12]
 8005278:	059a      	lsls	r2, r3, #22
 800527a:	d402      	bmi.n	8005282 <_vfiprintf_r+0x202>
 800527c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800527e:	f7ff fddb 	bl	8004e38 <__retarget_lock_release_recursive>
 8005282:	89ab      	ldrh	r3, [r5, #12]
 8005284:	065b      	lsls	r3, r3, #25
 8005286:	f53f af1d 	bmi.w	80050c4 <_vfiprintf_r+0x44>
 800528a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800528c:	e71c      	b.n	80050c8 <_vfiprintf_r+0x48>
 800528e:	ab03      	add	r3, sp, #12
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	462a      	mov	r2, r5
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <_vfiprintf_r+0x22c>)
 8005296:	a904      	add	r1, sp, #16
 8005298:	4630      	mov	r0, r6
 800529a:	f000 f879 	bl	8005390 <_printf_i>
 800529e:	e7e4      	b.n	800526a <_vfiprintf_r+0x1ea>
 80052a0:	08005bf4 	.word	0x08005bf4
 80052a4:	08005bfe 	.word	0x08005bfe
 80052a8:	00000000 	.word	0x00000000
 80052ac:	0800505b 	.word	0x0800505b
 80052b0:	08005bfa 	.word	0x08005bfa

080052b4 <_printf_common>:
 80052b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052b8:	4616      	mov	r6, r2
 80052ba:	4699      	mov	r9, r3
 80052bc:	688a      	ldr	r2, [r1, #8]
 80052be:	690b      	ldr	r3, [r1, #16]
 80052c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052c4:	4293      	cmp	r3, r2
 80052c6:	bfb8      	it	lt
 80052c8:	4613      	movlt	r3, r2
 80052ca:	6033      	str	r3, [r6, #0]
 80052cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052d0:	4607      	mov	r7, r0
 80052d2:	460c      	mov	r4, r1
 80052d4:	b10a      	cbz	r2, 80052da <_printf_common+0x26>
 80052d6:	3301      	adds	r3, #1
 80052d8:	6033      	str	r3, [r6, #0]
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	0699      	lsls	r1, r3, #26
 80052de:	bf42      	ittt	mi
 80052e0:	6833      	ldrmi	r3, [r6, #0]
 80052e2:	3302      	addmi	r3, #2
 80052e4:	6033      	strmi	r3, [r6, #0]
 80052e6:	6825      	ldr	r5, [r4, #0]
 80052e8:	f015 0506 	ands.w	r5, r5, #6
 80052ec:	d106      	bne.n	80052fc <_printf_common+0x48>
 80052ee:	f104 0a19 	add.w	sl, r4, #25
 80052f2:	68e3      	ldr	r3, [r4, #12]
 80052f4:	6832      	ldr	r2, [r6, #0]
 80052f6:	1a9b      	subs	r3, r3, r2
 80052f8:	42ab      	cmp	r3, r5
 80052fa:	dc26      	bgt.n	800534a <_printf_common+0x96>
 80052fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005300:	1e13      	subs	r3, r2, #0
 8005302:	6822      	ldr	r2, [r4, #0]
 8005304:	bf18      	it	ne
 8005306:	2301      	movne	r3, #1
 8005308:	0692      	lsls	r2, r2, #26
 800530a:	d42b      	bmi.n	8005364 <_printf_common+0xb0>
 800530c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005310:	4649      	mov	r1, r9
 8005312:	4638      	mov	r0, r7
 8005314:	47c0      	blx	r8
 8005316:	3001      	adds	r0, #1
 8005318:	d01e      	beq.n	8005358 <_printf_common+0xa4>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	6922      	ldr	r2, [r4, #16]
 800531e:	f003 0306 	and.w	r3, r3, #6
 8005322:	2b04      	cmp	r3, #4
 8005324:	bf02      	ittt	eq
 8005326:	68e5      	ldreq	r5, [r4, #12]
 8005328:	6833      	ldreq	r3, [r6, #0]
 800532a:	1aed      	subeq	r5, r5, r3
 800532c:	68a3      	ldr	r3, [r4, #8]
 800532e:	bf0c      	ite	eq
 8005330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005334:	2500      	movne	r5, #0
 8005336:	4293      	cmp	r3, r2
 8005338:	bfc4      	itt	gt
 800533a:	1a9b      	subgt	r3, r3, r2
 800533c:	18ed      	addgt	r5, r5, r3
 800533e:	2600      	movs	r6, #0
 8005340:	341a      	adds	r4, #26
 8005342:	42b5      	cmp	r5, r6
 8005344:	d11a      	bne.n	800537c <_printf_common+0xc8>
 8005346:	2000      	movs	r0, #0
 8005348:	e008      	b.n	800535c <_printf_common+0xa8>
 800534a:	2301      	movs	r3, #1
 800534c:	4652      	mov	r2, sl
 800534e:	4649      	mov	r1, r9
 8005350:	4638      	mov	r0, r7
 8005352:	47c0      	blx	r8
 8005354:	3001      	adds	r0, #1
 8005356:	d103      	bne.n	8005360 <_printf_common+0xac>
 8005358:	f04f 30ff 	mov.w	r0, #4294967295
 800535c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005360:	3501      	adds	r5, #1
 8005362:	e7c6      	b.n	80052f2 <_printf_common+0x3e>
 8005364:	18e1      	adds	r1, r4, r3
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	2030      	movs	r0, #48	; 0x30
 800536a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800536e:	4422      	add	r2, r4
 8005370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005374:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005378:	3302      	adds	r3, #2
 800537a:	e7c7      	b.n	800530c <_printf_common+0x58>
 800537c:	2301      	movs	r3, #1
 800537e:	4622      	mov	r2, r4
 8005380:	4649      	mov	r1, r9
 8005382:	4638      	mov	r0, r7
 8005384:	47c0      	blx	r8
 8005386:	3001      	adds	r0, #1
 8005388:	d0e6      	beq.n	8005358 <_printf_common+0xa4>
 800538a:	3601      	adds	r6, #1
 800538c:	e7d9      	b.n	8005342 <_printf_common+0x8e>
	...

08005390 <_printf_i>:
 8005390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005394:	7e0f      	ldrb	r7, [r1, #24]
 8005396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005398:	2f78      	cmp	r7, #120	; 0x78
 800539a:	4691      	mov	r9, r2
 800539c:	4680      	mov	r8, r0
 800539e:	460c      	mov	r4, r1
 80053a0:	469a      	mov	sl, r3
 80053a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053a6:	d807      	bhi.n	80053b8 <_printf_i+0x28>
 80053a8:	2f62      	cmp	r7, #98	; 0x62
 80053aa:	d80a      	bhi.n	80053c2 <_printf_i+0x32>
 80053ac:	2f00      	cmp	r7, #0
 80053ae:	f000 80d4 	beq.w	800555a <_printf_i+0x1ca>
 80053b2:	2f58      	cmp	r7, #88	; 0x58
 80053b4:	f000 80c0 	beq.w	8005538 <_printf_i+0x1a8>
 80053b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053c0:	e03a      	b.n	8005438 <_printf_i+0xa8>
 80053c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053c6:	2b15      	cmp	r3, #21
 80053c8:	d8f6      	bhi.n	80053b8 <_printf_i+0x28>
 80053ca:	a101      	add	r1, pc, #4	; (adr r1, 80053d0 <_printf_i+0x40>)
 80053cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053d0:	08005429 	.word	0x08005429
 80053d4:	0800543d 	.word	0x0800543d
 80053d8:	080053b9 	.word	0x080053b9
 80053dc:	080053b9 	.word	0x080053b9
 80053e0:	080053b9 	.word	0x080053b9
 80053e4:	080053b9 	.word	0x080053b9
 80053e8:	0800543d 	.word	0x0800543d
 80053ec:	080053b9 	.word	0x080053b9
 80053f0:	080053b9 	.word	0x080053b9
 80053f4:	080053b9 	.word	0x080053b9
 80053f8:	080053b9 	.word	0x080053b9
 80053fc:	08005541 	.word	0x08005541
 8005400:	08005469 	.word	0x08005469
 8005404:	080054fb 	.word	0x080054fb
 8005408:	080053b9 	.word	0x080053b9
 800540c:	080053b9 	.word	0x080053b9
 8005410:	08005563 	.word	0x08005563
 8005414:	080053b9 	.word	0x080053b9
 8005418:	08005469 	.word	0x08005469
 800541c:	080053b9 	.word	0x080053b9
 8005420:	080053b9 	.word	0x080053b9
 8005424:	08005503 	.word	0x08005503
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	1d1a      	adds	r2, r3, #4
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	602a      	str	r2, [r5, #0]
 8005430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005438:	2301      	movs	r3, #1
 800543a:	e09f      	b.n	800557c <_printf_i+0x1ec>
 800543c:	6820      	ldr	r0, [r4, #0]
 800543e:	682b      	ldr	r3, [r5, #0]
 8005440:	0607      	lsls	r7, r0, #24
 8005442:	f103 0104 	add.w	r1, r3, #4
 8005446:	6029      	str	r1, [r5, #0]
 8005448:	d501      	bpl.n	800544e <_printf_i+0xbe>
 800544a:	681e      	ldr	r6, [r3, #0]
 800544c:	e003      	b.n	8005456 <_printf_i+0xc6>
 800544e:	0646      	lsls	r6, r0, #25
 8005450:	d5fb      	bpl.n	800544a <_printf_i+0xba>
 8005452:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005456:	2e00      	cmp	r6, #0
 8005458:	da03      	bge.n	8005462 <_printf_i+0xd2>
 800545a:	232d      	movs	r3, #45	; 0x2d
 800545c:	4276      	negs	r6, r6
 800545e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005462:	485a      	ldr	r0, [pc, #360]	; (80055cc <_printf_i+0x23c>)
 8005464:	230a      	movs	r3, #10
 8005466:	e012      	b.n	800548e <_printf_i+0xfe>
 8005468:	682b      	ldr	r3, [r5, #0]
 800546a:	6820      	ldr	r0, [r4, #0]
 800546c:	1d19      	adds	r1, r3, #4
 800546e:	6029      	str	r1, [r5, #0]
 8005470:	0605      	lsls	r5, r0, #24
 8005472:	d501      	bpl.n	8005478 <_printf_i+0xe8>
 8005474:	681e      	ldr	r6, [r3, #0]
 8005476:	e002      	b.n	800547e <_printf_i+0xee>
 8005478:	0641      	lsls	r1, r0, #25
 800547a:	d5fb      	bpl.n	8005474 <_printf_i+0xe4>
 800547c:	881e      	ldrh	r6, [r3, #0]
 800547e:	4853      	ldr	r0, [pc, #332]	; (80055cc <_printf_i+0x23c>)
 8005480:	2f6f      	cmp	r7, #111	; 0x6f
 8005482:	bf0c      	ite	eq
 8005484:	2308      	moveq	r3, #8
 8005486:	230a      	movne	r3, #10
 8005488:	2100      	movs	r1, #0
 800548a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800548e:	6865      	ldr	r5, [r4, #4]
 8005490:	60a5      	str	r5, [r4, #8]
 8005492:	2d00      	cmp	r5, #0
 8005494:	bfa2      	ittt	ge
 8005496:	6821      	ldrge	r1, [r4, #0]
 8005498:	f021 0104 	bicge.w	r1, r1, #4
 800549c:	6021      	strge	r1, [r4, #0]
 800549e:	b90e      	cbnz	r6, 80054a4 <_printf_i+0x114>
 80054a0:	2d00      	cmp	r5, #0
 80054a2:	d04b      	beq.n	800553c <_printf_i+0x1ac>
 80054a4:	4615      	mov	r5, r2
 80054a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80054aa:	fb03 6711 	mls	r7, r3, r1, r6
 80054ae:	5dc7      	ldrb	r7, [r0, r7]
 80054b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054b4:	4637      	mov	r7, r6
 80054b6:	42bb      	cmp	r3, r7
 80054b8:	460e      	mov	r6, r1
 80054ba:	d9f4      	bls.n	80054a6 <_printf_i+0x116>
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d10b      	bne.n	80054d8 <_printf_i+0x148>
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	07de      	lsls	r6, r3, #31
 80054c4:	d508      	bpl.n	80054d8 <_printf_i+0x148>
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	6861      	ldr	r1, [r4, #4]
 80054ca:	4299      	cmp	r1, r3
 80054cc:	bfde      	ittt	le
 80054ce:	2330      	movle	r3, #48	; 0x30
 80054d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054d8:	1b52      	subs	r2, r2, r5
 80054da:	6122      	str	r2, [r4, #16]
 80054dc:	f8cd a000 	str.w	sl, [sp]
 80054e0:	464b      	mov	r3, r9
 80054e2:	aa03      	add	r2, sp, #12
 80054e4:	4621      	mov	r1, r4
 80054e6:	4640      	mov	r0, r8
 80054e8:	f7ff fee4 	bl	80052b4 <_printf_common>
 80054ec:	3001      	adds	r0, #1
 80054ee:	d14a      	bne.n	8005586 <_printf_i+0x1f6>
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295
 80054f4:	b004      	add	sp, #16
 80054f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	f043 0320 	orr.w	r3, r3, #32
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	4833      	ldr	r0, [pc, #204]	; (80055d0 <_printf_i+0x240>)
 8005504:	2778      	movs	r7, #120	; 0x78
 8005506:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	6829      	ldr	r1, [r5, #0]
 800550e:	061f      	lsls	r7, r3, #24
 8005510:	f851 6b04 	ldr.w	r6, [r1], #4
 8005514:	d402      	bmi.n	800551c <_printf_i+0x18c>
 8005516:	065f      	lsls	r7, r3, #25
 8005518:	bf48      	it	mi
 800551a:	b2b6      	uxthmi	r6, r6
 800551c:	07df      	lsls	r7, r3, #31
 800551e:	bf48      	it	mi
 8005520:	f043 0320 	orrmi.w	r3, r3, #32
 8005524:	6029      	str	r1, [r5, #0]
 8005526:	bf48      	it	mi
 8005528:	6023      	strmi	r3, [r4, #0]
 800552a:	b91e      	cbnz	r6, 8005534 <_printf_i+0x1a4>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	f023 0320 	bic.w	r3, r3, #32
 8005532:	6023      	str	r3, [r4, #0]
 8005534:	2310      	movs	r3, #16
 8005536:	e7a7      	b.n	8005488 <_printf_i+0xf8>
 8005538:	4824      	ldr	r0, [pc, #144]	; (80055cc <_printf_i+0x23c>)
 800553a:	e7e4      	b.n	8005506 <_printf_i+0x176>
 800553c:	4615      	mov	r5, r2
 800553e:	e7bd      	b.n	80054bc <_printf_i+0x12c>
 8005540:	682b      	ldr	r3, [r5, #0]
 8005542:	6826      	ldr	r6, [r4, #0]
 8005544:	6961      	ldr	r1, [r4, #20]
 8005546:	1d18      	adds	r0, r3, #4
 8005548:	6028      	str	r0, [r5, #0]
 800554a:	0635      	lsls	r5, r6, #24
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	d501      	bpl.n	8005554 <_printf_i+0x1c4>
 8005550:	6019      	str	r1, [r3, #0]
 8005552:	e002      	b.n	800555a <_printf_i+0x1ca>
 8005554:	0670      	lsls	r0, r6, #25
 8005556:	d5fb      	bpl.n	8005550 <_printf_i+0x1c0>
 8005558:	8019      	strh	r1, [r3, #0]
 800555a:	2300      	movs	r3, #0
 800555c:	6123      	str	r3, [r4, #16]
 800555e:	4615      	mov	r5, r2
 8005560:	e7bc      	b.n	80054dc <_printf_i+0x14c>
 8005562:	682b      	ldr	r3, [r5, #0]
 8005564:	1d1a      	adds	r2, r3, #4
 8005566:	602a      	str	r2, [r5, #0]
 8005568:	681d      	ldr	r5, [r3, #0]
 800556a:	6862      	ldr	r2, [r4, #4]
 800556c:	2100      	movs	r1, #0
 800556e:	4628      	mov	r0, r5
 8005570:	f7fa fe66 	bl	8000240 <memchr>
 8005574:	b108      	cbz	r0, 800557a <_printf_i+0x1ea>
 8005576:	1b40      	subs	r0, r0, r5
 8005578:	6060      	str	r0, [r4, #4]
 800557a:	6863      	ldr	r3, [r4, #4]
 800557c:	6123      	str	r3, [r4, #16]
 800557e:	2300      	movs	r3, #0
 8005580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005584:	e7aa      	b.n	80054dc <_printf_i+0x14c>
 8005586:	6923      	ldr	r3, [r4, #16]
 8005588:	462a      	mov	r2, r5
 800558a:	4649      	mov	r1, r9
 800558c:	4640      	mov	r0, r8
 800558e:	47d0      	blx	sl
 8005590:	3001      	adds	r0, #1
 8005592:	d0ad      	beq.n	80054f0 <_printf_i+0x160>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	079b      	lsls	r3, r3, #30
 8005598:	d413      	bmi.n	80055c2 <_printf_i+0x232>
 800559a:	68e0      	ldr	r0, [r4, #12]
 800559c:	9b03      	ldr	r3, [sp, #12]
 800559e:	4298      	cmp	r0, r3
 80055a0:	bfb8      	it	lt
 80055a2:	4618      	movlt	r0, r3
 80055a4:	e7a6      	b.n	80054f4 <_printf_i+0x164>
 80055a6:	2301      	movs	r3, #1
 80055a8:	4632      	mov	r2, r6
 80055aa:	4649      	mov	r1, r9
 80055ac:	4640      	mov	r0, r8
 80055ae:	47d0      	blx	sl
 80055b0:	3001      	adds	r0, #1
 80055b2:	d09d      	beq.n	80054f0 <_printf_i+0x160>
 80055b4:	3501      	adds	r5, #1
 80055b6:	68e3      	ldr	r3, [r4, #12]
 80055b8:	9903      	ldr	r1, [sp, #12]
 80055ba:	1a5b      	subs	r3, r3, r1
 80055bc:	42ab      	cmp	r3, r5
 80055be:	dcf2      	bgt.n	80055a6 <_printf_i+0x216>
 80055c0:	e7eb      	b.n	800559a <_printf_i+0x20a>
 80055c2:	2500      	movs	r5, #0
 80055c4:	f104 0619 	add.w	r6, r4, #25
 80055c8:	e7f5      	b.n	80055b6 <_printf_i+0x226>
 80055ca:	bf00      	nop
 80055cc:	08005c05 	.word	0x08005c05
 80055d0:	08005c16 	.word	0x08005c16

080055d4 <__sflush_r>:
 80055d4:	898a      	ldrh	r2, [r1, #12]
 80055d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055da:	4605      	mov	r5, r0
 80055dc:	0710      	lsls	r0, r2, #28
 80055de:	460c      	mov	r4, r1
 80055e0:	d458      	bmi.n	8005694 <__sflush_r+0xc0>
 80055e2:	684b      	ldr	r3, [r1, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dc05      	bgt.n	80055f4 <__sflush_r+0x20>
 80055e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	dc02      	bgt.n	80055f4 <__sflush_r+0x20>
 80055ee:	2000      	movs	r0, #0
 80055f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055f6:	2e00      	cmp	r6, #0
 80055f8:	d0f9      	beq.n	80055ee <__sflush_r+0x1a>
 80055fa:	2300      	movs	r3, #0
 80055fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005600:	682f      	ldr	r7, [r5, #0]
 8005602:	6a21      	ldr	r1, [r4, #32]
 8005604:	602b      	str	r3, [r5, #0]
 8005606:	d032      	beq.n	800566e <__sflush_r+0x9a>
 8005608:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800560a:	89a3      	ldrh	r3, [r4, #12]
 800560c:	075a      	lsls	r2, r3, #29
 800560e:	d505      	bpl.n	800561c <__sflush_r+0x48>
 8005610:	6863      	ldr	r3, [r4, #4]
 8005612:	1ac0      	subs	r0, r0, r3
 8005614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005616:	b10b      	cbz	r3, 800561c <__sflush_r+0x48>
 8005618:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800561a:	1ac0      	subs	r0, r0, r3
 800561c:	2300      	movs	r3, #0
 800561e:	4602      	mov	r2, r0
 8005620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005622:	6a21      	ldr	r1, [r4, #32]
 8005624:	4628      	mov	r0, r5
 8005626:	47b0      	blx	r6
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	d106      	bne.n	800563c <__sflush_r+0x68>
 800562e:	6829      	ldr	r1, [r5, #0]
 8005630:	291d      	cmp	r1, #29
 8005632:	d82b      	bhi.n	800568c <__sflush_r+0xb8>
 8005634:	4a29      	ldr	r2, [pc, #164]	; (80056dc <__sflush_r+0x108>)
 8005636:	410a      	asrs	r2, r1
 8005638:	07d6      	lsls	r6, r2, #31
 800563a:	d427      	bmi.n	800568c <__sflush_r+0xb8>
 800563c:	2200      	movs	r2, #0
 800563e:	6062      	str	r2, [r4, #4]
 8005640:	04d9      	lsls	r1, r3, #19
 8005642:	6922      	ldr	r2, [r4, #16]
 8005644:	6022      	str	r2, [r4, #0]
 8005646:	d504      	bpl.n	8005652 <__sflush_r+0x7e>
 8005648:	1c42      	adds	r2, r0, #1
 800564a:	d101      	bne.n	8005650 <__sflush_r+0x7c>
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	b903      	cbnz	r3, 8005652 <__sflush_r+0x7e>
 8005650:	6560      	str	r0, [r4, #84]	; 0x54
 8005652:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005654:	602f      	str	r7, [r5, #0]
 8005656:	2900      	cmp	r1, #0
 8005658:	d0c9      	beq.n	80055ee <__sflush_r+0x1a>
 800565a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800565e:	4299      	cmp	r1, r3
 8005660:	d002      	beq.n	8005668 <__sflush_r+0x94>
 8005662:	4628      	mov	r0, r5
 8005664:	f7ff fbea 	bl	8004e3c <_free_r>
 8005668:	2000      	movs	r0, #0
 800566a:	6360      	str	r0, [r4, #52]	; 0x34
 800566c:	e7c0      	b.n	80055f0 <__sflush_r+0x1c>
 800566e:	2301      	movs	r3, #1
 8005670:	4628      	mov	r0, r5
 8005672:	47b0      	blx	r6
 8005674:	1c41      	adds	r1, r0, #1
 8005676:	d1c8      	bne.n	800560a <__sflush_r+0x36>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0c5      	beq.n	800560a <__sflush_r+0x36>
 800567e:	2b1d      	cmp	r3, #29
 8005680:	d001      	beq.n	8005686 <__sflush_r+0xb2>
 8005682:	2b16      	cmp	r3, #22
 8005684:	d101      	bne.n	800568a <__sflush_r+0xb6>
 8005686:	602f      	str	r7, [r5, #0]
 8005688:	e7b1      	b.n	80055ee <__sflush_r+0x1a>
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005690:	81a3      	strh	r3, [r4, #12]
 8005692:	e7ad      	b.n	80055f0 <__sflush_r+0x1c>
 8005694:	690f      	ldr	r7, [r1, #16]
 8005696:	2f00      	cmp	r7, #0
 8005698:	d0a9      	beq.n	80055ee <__sflush_r+0x1a>
 800569a:	0793      	lsls	r3, r2, #30
 800569c:	680e      	ldr	r6, [r1, #0]
 800569e:	bf08      	it	eq
 80056a0:	694b      	ldreq	r3, [r1, #20]
 80056a2:	600f      	str	r7, [r1, #0]
 80056a4:	bf18      	it	ne
 80056a6:	2300      	movne	r3, #0
 80056a8:	eba6 0807 	sub.w	r8, r6, r7
 80056ac:	608b      	str	r3, [r1, #8]
 80056ae:	f1b8 0f00 	cmp.w	r8, #0
 80056b2:	dd9c      	ble.n	80055ee <__sflush_r+0x1a>
 80056b4:	6a21      	ldr	r1, [r4, #32]
 80056b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056b8:	4643      	mov	r3, r8
 80056ba:	463a      	mov	r2, r7
 80056bc:	4628      	mov	r0, r5
 80056be:	47b0      	blx	r6
 80056c0:	2800      	cmp	r0, #0
 80056c2:	dc06      	bgt.n	80056d2 <__sflush_r+0xfe>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ca:	81a3      	strh	r3, [r4, #12]
 80056cc:	f04f 30ff 	mov.w	r0, #4294967295
 80056d0:	e78e      	b.n	80055f0 <__sflush_r+0x1c>
 80056d2:	4407      	add	r7, r0
 80056d4:	eba8 0800 	sub.w	r8, r8, r0
 80056d8:	e7e9      	b.n	80056ae <__sflush_r+0xda>
 80056da:	bf00      	nop
 80056dc:	dfbffffe 	.word	0xdfbffffe

080056e0 <_fflush_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	690b      	ldr	r3, [r1, #16]
 80056e4:	4605      	mov	r5, r0
 80056e6:	460c      	mov	r4, r1
 80056e8:	b913      	cbnz	r3, 80056f0 <_fflush_r+0x10>
 80056ea:	2500      	movs	r5, #0
 80056ec:	4628      	mov	r0, r5
 80056ee:	bd38      	pop	{r3, r4, r5, pc}
 80056f0:	b118      	cbz	r0, 80056fa <_fflush_r+0x1a>
 80056f2:	6a03      	ldr	r3, [r0, #32]
 80056f4:	b90b      	cbnz	r3, 80056fa <_fflush_r+0x1a>
 80056f6:	f7ff f9a9 	bl	8004a4c <__sinit>
 80056fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0f3      	beq.n	80056ea <_fflush_r+0xa>
 8005702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005704:	07d0      	lsls	r0, r2, #31
 8005706:	d404      	bmi.n	8005712 <_fflush_r+0x32>
 8005708:	0599      	lsls	r1, r3, #22
 800570a:	d402      	bmi.n	8005712 <_fflush_r+0x32>
 800570c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800570e:	f7ff fb92 	bl	8004e36 <__retarget_lock_acquire_recursive>
 8005712:	4628      	mov	r0, r5
 8005714:	4621      	mov	r1, r4
 8005716:	f7ff ff5d 	bl	80055d4 <__sflush_r>
 800571a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800571c:	07da      	lsls	r2, r3, #31
 800571e:	4605      	mov	r5, r0
 8005720:	d4e4      	bmi.n	80056ec <_fflush_r+0xc>
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	059b      	lsls	r3, r3, #22
 8005726:	d4e1      	bmi.n	80056ec <_fflush_r+0xc>
 8005728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800572a:	f7ff fb85 	bl	8004e38 <__retarget_lock_release_recursive>
 800572e:	e7dd      	b.n	80056ec <_fflush_r+0xc>

08005730 <__swhatbuf_r>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	460c      	mov	r4, r1
 8005734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005738:	2900      	cmp	r1, #0
 800573a:	b096      	sub	sp, #88	; 0x58
 800573c:	4615      	mov	r5, r2
 800573e:	461e      	mov	r6, r3
 8005740:	da0d      	bge.n	800575e <__swhatbuf_r+0x2e>
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005748:	f04f 0100 	mov.w	r1, #0
 800574c:	bf0c      	ite	eq
 800574e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005752:	2340      	movne	r3, #64	; 0x40
 8005754:	2000      	movs	r0, #0
 8005756:	6031      	str	r1, [r6, #0]
 8005758:	602b      	str	r3, [r5, #0]
 800575a:	b016      	add	sp, #88	; 0x58
 800575c:	bd70      	pop	{r4, r5, r6, pc}
 800575e:	466a      	mov	r2, sp
 8005760:	f000 f848 	bl	80057f4 <_fstat_r>
 8005764:	2800      	cmp	r0, #0
 8005766:	dbec      	blt.n	8005742 <__swhatbuf_r+0x12>
 8005768:	9901      	ldr	r1, [sp, #4]
 800576a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800576e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005772:	4259      	negs	r1, r3
 8005774:	4159      	adcs	r1, r3
 8005776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800577a:	e7eb      	b.n	8005754 <__swhatbuf_r+0x24>

0800577c <__smakebuf_r>:
 800577c:	898b      	ldrh	r3, [r1, #12]
 800577e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005780:	079d      	lsls	r5, r3, #30
 8005782:	4606      	mov	r6, r0
 8005784:	460c      	mov	r4, r1
 8005786:	d507      	bpl.n	8005798 <__smakebuf_r+0x1c>
 8005788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	6123      	str	r3, [r4, #16]
 8005790:	2301      	movs	r3, #1
 8005792:	6163      	str	r3, [r4, #20]
 8005794:	b002      	add	sp, #8
 8005796:	bd70      	pop	{r4, r5, r6, pc}
 8005798:	ab01      	add	r3, sp, #4
 800579a:	466a      	mov	r2, sp
 800579c:	f7ff ffc8 	bl	8005730 <__swhatbuf_r>
 80057a0:	9900      	ldr	r1, [sp, #0]
 80057a2:	4605      	mov	r5, r0
 80057a4:	4630      	mov	r0, r6
 80057a6:	f7ff fbb5 	bl	8004f14 <_malloc_r>
 80057aa:	b948      	cbnz	r0, 80057c0 <__smakebuf_r+0x44>
 80057ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057b0:	059a      	lsls	r2, r3, #22
 80057b2:	d4ef      	bmi.n	8005794 <__smakebuf_r+0x18>
 80057b4:	f023 0303 	bic.w	r3, r3, #3
 80057b8:	f043 0302 	orr.w	r3, r3, #2
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	e7e3      	b.n	8005788 <__smakebuf_r+0xc>
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	6020      	str	r0, [r4, #0]
 80057c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c8:	81a3      	strh	r3, [r4, #12]
 80057ca:	9b00      	ldr	r3, [sp, #0]
 80057cc:	6163      	str	r3, [r4, #20]
 80057ce:	9b01      	ldr	r3, [sp, #4]
 80057d0:	6120      	str	r0, [r4, #16]
 80057d2:	b15b      	cbz	r3, 80057ec <__smakebuf_r+0x70>
 80057d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057d8:	4630      	mov	r0, r6
 80057da:	f000 f81d 	bl	8005818 <_isatty_r>
 80057de:	b128      	cbz	r0, 80057ec <__smakebuf_r+0x70>
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	f023 0303 	bic.w	r3, r3, #3
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	81a3      	strh	r3, [r4, #12]
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	431d      	orrs	r5, r3
 80057f0:	81a5      	strh	r5, [r4, #12]
 80057f2:	e7cf      	b.n	8005794 <__smakebuf_r+0x18>

080057f4 <_fstat_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	4d07      	ldr	r5, [pc, #28]	; (8005814 <_fstat_r+0x20>)
 80057f8:	2300      	movs	r3, #0
 80057fa:	4604      	mov	r4, r0
 80057fc:	4608      	mov	r0, r1
 80057fe:	4611      	mov	r1, r2
 8005800:	602b      	str	r3, [r5, #0]
 8005802:	f7fc f8e4 	bl	80019ce <_fstat>
 8005806:	1c43      	adds	r3, r0, #1
 8005808:	d102      	bne.n	8005810 <_fstat_r+0x1c>
 800580a:	682b      	ldr	r3, [r5, #0]
 800580c:	b103      	cbz	r3, 8005810 <_fstat_r+0x1c>
 800580e:	6023      	str	r3, [r4, #0]
 8005810:	bd38      	pop	{r3, r4, r5, pc}
 8005812:	bf00      	nop
 8005814:	200008ac 	.word	0x200008ac

08005818 <_isatty_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4d06      	ldr	r5, [pc, #24]	; (8005834 <_isatty_r+0x1c>)
 800581c:	2300      	movs	r3, #0
 800581e:	4604      	mov	r4, r0
 8005820:	4608      	mov	r0, r1
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	f7fc f8e3 	bl	80019ee <_isatty>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d102      	bne.n	8005832 <_isatty_r+0x1a>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	b103      	cbz	r3, 8005832 <_isatty_r+0x1a>
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	200008ac 	.word	0x200008ac

08005838 <_sbrk_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4d06      	ldr	r5, [pc, #24]	; (8005854 <_sbrk_r+0x1c>)
 800583c:	2300      	movs	r3, #0
 800583e:	4604      	mov	r4, r0
 8005840:	4608      	mov	r0, r1
 8005842:	602b      	str	r3, [r5, #0]
 8005844:	f7fc f8ec 	bl	8001a20 <_sbrk>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d102      	bne.n	8005852 <_sbrk_r+0x1a>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	b103      	cbz	r3, 8005852 <_sbrk_r+0x1a>
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	200008ac 	.word	0x200008ac

08005858 <_init>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	bf00      	nop
 800585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585e:	bc08      	pop	{r3}
 8005860:	469e      	mov	lr, r3
 8005862:	4770      	bx	lr

08005864 <_fini>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	bf00      	nop
 8005868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586a:	bc08      	pop	{r3}
 800586c:	469e      	mov	lr, r3
 800586e:	4770      	bx	lr
